
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jun 20 17:33:26 CEST 2017
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java.util.ArrayList;
import java.util.HashMap;
import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.symboltable.structure.HashTableDataStructure;
import rs.etf.pp1.mj.runtime.Code;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jun 20 17:33:26 CEST 2017
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\224\000\002\003\010\000\002\002\004\000\002\041" +
    "\003\000\002\031\004\000\002\031\002\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\004\004\000" +
    "\002\004\002\000\002\006\005\000\002\006\005\000\002" +
    "\036\005\000\002\036\005\000\002\036\003\000\002\035" +
    "\003\000\002\035\005\000\002\033\006\000\002\034\005" +
    "\000\002\034\003\000\002\050\005\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\044\003\000\002" +
    "\023\004\000\002\023\003\000\002\023\002\000\002\024" +
    "\004\000\002\024\002\000\002\071\002\000\002\025\007" +
    "\000\002\026\005\000\002\026\003\000\002\027\003\000" +
    "\002\027\005\000\002\043\003\000\002\030\011\000\002" +
    "\037\005\000\002\037\004\000\002\037\002\000\002\045" +
    "\003\000\002\045\003\000\002\005\004\000\002\005\002" +
    "\000\002\070\003\000\002\070\002\000\002\072\002\000" +
    "\002\073\002\000\002\074\002\000\002\007\017\000\002" +
    "\040\005\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\002\000\002\010\007\000\002\014\005" +
    "\000\002\014\005\000\002\014\003\000\002\013\004\000" +
    "\002\013\006\000\002\017\004\000\002\017\002\000\002" +
    "\020\003\000\002\020\003\000\002\075\002\000\002\032" +
    "\006\000\002\032\004\000\002\032\004\000\002\032\006" +
    "\000\002\011\012\000\002\022\007\000\002\022\011\000" +
    "\002\022\004\000\002\057\003\000\002\057\002\000\002" +
    "\057\003\000\002\056\003\000\002\056\003\000\002\021" +
    "\004\000\002\021\011\000\002\021\004\000\002\021\004" +
    "\000\002\021\004\000\002\021\007\000\002\021\007\000" +
    "\002\021\005\000\002\021\004\000\002\021\005\000\002" +
    "\021\006\000\002\053\005\000\002\053\003\000\002\054" +
    "\005\000\002\054\003\000\002\055\005\000\002\055\003" +
    "\000\002\046\003\000\002\076\002\000\002\051\006\000" +
    "\002\051\003\000\002\077\002\000\002\051\005\000\002" +
    "\100\002\000\002\052\006\000\002\052\003\000\002\047" +
    "\003\000\002\047\003\000\002\047\003\000\002\047\003" +
    "\000\002\047\006\000\002\047\007\000\002\047\004\000" +
    "\002\047\005\000\002\015\003\000\002\015\002\000\002" +
    "\016\005\000\002\016\003\000\002\042\003\000\002\101" +
    "\002\000\002\042\007\000\002\042\005\000\002\062\003" +
    "\000\002\062\003\000\002\062\003\000\002\062\003\000" +
    "\002\062\003\000\002\062\003\000\002\061\003\000\002" +
    "\061\003\000\002\064\003\000\002\064\003\000\002\064" +
    "\003\000\002\065\003\000\002\065\003\000\002\065\003" +
    "\000\002\060\003\000\002\060\003\000\002\066\003\000" +
    "\002\066\003\000\002\067\003\000\002\067\003\000\002" +
    "\063\003\000\002\063\003\000\002\063\003\000\002\063" +
    "\003\000\002\063\003\000\002\063\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\361\000\004\004\005\001\002\000\004\002\363\001" +
    "\002\000\004\052\006\001\002\000\012\005\uffff\025\uffff" +
    "\052\uffff\064\uffff\001\002\000\012\005\ufffd\025\ufffd\052" +
    "\ufffd\064\ufffd\001\002\000\012\005\012\025\021\052\013" +
    "\064\020\001\002\000\006\003\350\052\351\001\002\000" +
    "\012\006\uffd5\020\uffd5\026\uffd5\052\uffd5\001\002\000\070" +
    "\003\uffe9\005\uffe9\007\uffe9\011\uffe9\012\uffe9\022\uffe9\023" +
    "\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043" +
    "\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\052\uffe9\055\uffe9" +
    "\056\uffe9\001\002\000\012\005\ufffb\025\ufffb\052\ufffb\064" +
    "\ufffb\001\002\000\012\005\ufffa\025\ufffa\052\ufffa\064\ufffa" +
    "\001\002\000\012\005\ufffe\025\ufffe\052\ufffe\064\ufffe\001" +
    "\002\000\012\005\ufffc\025\ufffc\052\ufffc\064\ufffc\001\002" +
    "\000\004\052\037\001\002\000\004\052\013\001\002\000" +
    "\004\052\024\001\002\000\006\007\uffee\012\uffee\001\002" +
    "\000\004\017\031\001\002\000\006\007\027\012\026\001" +
    "\002\000\004\052\024\001\002\000\012\005\ufff0\025\ufff0" +
    "\052\ufff0\064\ufff0\001\002\000\006\007\uffef\012\uffef\001" +
    "\002\000\010\050\033\051\032\054\034\001\002\000\006" +
    "\007\uffeb\012\uffeb\001\002\000\006\007\uffec\012\uffec\001" +
    "\002\000\006\007\uffea\012\uffea\001\002\000\006\007\uffed" +
    "\012\uffed\001\002\000\010\003\041\005\uffe6\053\040\001" +
    "\002\000\010\003\uffdd\005\uffdd\053\uffdd\001\002\000\004" +
    "\052\013\001\002\000\004\005\uffe7\001\002\000\004\005" +
    "\043\001\002\000\014\003\uffe4\005\uffe4\006\uffe4\026\uffe4" +
    "\052\uffe4\001\002\000\014\003\046\005\045\006\uffd9\026" +
    "\050\052\uffd3\001\002\000\012\006\uffd5\020\uffd5\026\uffd5" +
    "\052\uffd5\001\002\000\004\005\066\001\002\000\004\052" +
    "\uffe3\001\002\000\006\020\uffd4\052\uffd4\001\002\000\014" +
    "\003\uffe5\005\uffe5\006\uffe5\026\uffe5\052\uffe5\001\002\000" +
    "\004\006\053\001\002\000\012\005\uffdc\025\uffdc\052\uffdc" +
    "\064\uffdc\001\002\000\004\052\013\001\002\000\004\052" +
    "\057\001\002\000\006\007\uffe0\012\uffe0\001\002\000\010" +
    "\007\uffdf\012\uffdf\022\064\001\002\000\006\007\062\012" +
    "\061\001\002\000\004\052\057\001\002\000\014\003\uffe2" +
    "\005\uffe2\006\uffe2\026\uffe2\052\uffe2\001\002\000\006\007" +
    "\uffe1\012\uffe1\001\002\000\004\023\065\001\002\000\006" +
    "\007\uffde\012\uffde\001\002\000\004\006\uffda\001\002\000" +
    "\012\006\071\020\uffd3\026\050\052\uffd3\001\002\000\006" +
    "\020\075\052\013\001\002\000\004\006\uffdb\001\002\000" +
    "\012\006\uffd6\020\uffd6\026\uffd6\052\uffd6\001\002\000\004" +
    "\052\uffd8\001\002\000\004\052\076\001\002\000\004\052" +
    "\uffd7\001\002\000\004\010\uffd2\001\002\000\004\010\100" +
    "\001\002\000\010\003\102\011\uffca\052\013\001\002\000" +
    "\006\027\340\052\335\001\002\000\006\011\uffcb\012\332" +
    "\001\002\000\004\011\uffd1\001\002\000\004\011\uffcc\001" +
    "\002\000\006\011\uffcd\012\107\001\002\000\006\011\uffc6" +
    "\012\uffc6\001\002\000\004\052\013\001\002\000\004\011" +
    "\uffce\001\002\000\006\011\uffc8\012\uffc8\001\002\000\004" +
    "\011\113\001\002\000\006\005\ufff8\052\ufff8\001\002\000" +
    "\006\005\115\052\013\001\002\000\026\005\uffd0\006\uffd0" +
    "\013\uffd0\014\uffd0\021\uffd0\052\uffd0\057\uffd0\061\uffd0\062" +
    "\uffd0\063\uffd0\001\002\000\006\005\ufff9\052\ufff9\001\002" +
    "\000\026\005\uffc2\006\uffc2\013\uffc2\014\uffc2\021\uffc2\052" +
    "\uffc2\057\uffc2\061\uffc2\062\uffc2\063\uffc2\001\002\000\026" +
    "\005\122\006\137\013\133\014\136\021\121\052\123\057" +
    "\127\061\124\062\140\063\135\001\002\000\004\010\326" +
    "\001\002\000\026\005\uffc2\006\uffc2\013\uffc2\014\uffc2\021" +
    "\uffc2\052\uffc2\057\uffc2\061\uffc2\062\uffc2\063\uffc2\001\002" +
    "\000\072\007\uff8b\010\uff8b\011\uff8b\012\uff8b\015\uff8b\016" +
    "\uff8b\017\uff8b\022\uff8b\023\uff8b\027\uff8b\030\uff8b\031\uff8b" +
    "\032\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b\040" +
    "\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b" +
    "\047\uff8b\055\uff8b\056\uff8b\001\002\000\004\010\307\001" +
    "\002\000\030\010\276\015\274\016\275\017\272\022\204" +
    "\027\206\035\277\036\270\037\300\040\267\041\271\001" +
    "\002\000\026\005\uffc0\006\uffc0\013\uffc0\014\uffc0\021\uffc0" +
    "\052\uffc0\057\uffc0\061\uffc0\062\uffc0\063\uffc0\001\002\000" +
    "\004\010\240\001\002\000\004\007\237\001\002\000\026" +
    "\005\uffc3\006\uffc3\013\uffc3\014\uffc3\021\uffc3\052\uffc3\057" +
    "\uffc3\061\uffc3\062\uffc3\063\uffc3\001\002\000\024\005\122" +
    "\013\133\014\136\021\121\052\123\057\127\061\124\062" +
    "\140\063\135\001\002\000\004\010\231\001\002\000\026" +
    "\005\uffc1\006\uffc1\013\uffc1\014\uffc1\021\uffc1\052\uffc1\057" +
    "\uffc1\061\uffc1\062\uffc1\063\uffc1\001\002\000\004\007\230" +
    "\001\002\000\022\007\152\010\155\024\146\033\142\050" +
    "\151\051\143\052\123\054\144\001\002\000\012\006\uffcf" +
    "\020\uffcf\026\uffcf\052\uffcf\001\002\000\004\007\141\001" +
    "\002\000\030\005\uffae\006\uffae\013\uffae\014\uffae\021\uffae" +
    "\052\uffae\057\uffae\060\uffae\061\uffae\062\uffae\063\uffae\001" +
    "\002\000\016\010\uff9c\024\uff9c\050\uff9c\051\uff9c\052\uff9c" +
    "\054\uff9c\001\002\000\056\007\uff96\011\uff96\012\uff96\023" +
    "\uff96\030\uff96\031\uff96\032\uff96\033\uff96\034\uff96\035\uff96" +
    "\036\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044" +
    "\uff96\045\uff96\046\uff96\047\uff96\055\uff96\056\uff96\001\002" +
    "\000\056\007\uff95\011\uff95\012\uff95\023\uff95\030\uff95\031" +
    "\uff95\032\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95" +
    "\040\uff95\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046" +
    "\uff95\047\uff95\055\uff95\056\uff95\001\002\000\004\007\225" +
    "\001\002\000\004\052\013\001\002\000\064\007\uff94\010" +
    "\205\011\uff94\012\uff94\022\204\023\uff94\027\206\030\uff94" +
    "\031\uff94\032\uff94\033\uff94\034\uff94\035\uff94\036\uff94\037" +
    "\uff94\040\uff94\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94" +
    "\046\uff94\047\uff94\055\uff94\056\uff94\001\002\000\042\007" +
    "\uffa0\011\uffa0\012\uffa0\023\uffa0\032\174\033\176\035\173" +
    "\036\175\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047" +
    "\uffa0\055\uffa0\056\uffa0\001\002\000\056\007\uff97\011\uff97" +
    "\012\uff97\023\uff97\030\uff97\031\uff97\032\uff97\033\uff97\034" +
    "\uff97\035\uff97\036\uff97\037\uff97\040\uff97\041\uff97\042\uff97" +
    "\043\uff97\044\uff97\045\uff97\046\uff97\047\uff97\055\uff97\056" +
    "\uff97\001\002\000\030\005\uffa9\006\uffa9\013\uffa9\014\uffa9" +
    "\021\uffa9\052\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9\063" +
    "\uffa9\001\002\000\056\007\uff9d\011\uff9d\012\uff9d\023\uff9d" +
    "\030\167\031\164\032\uff9d\033\uff9d\034\162\035\uff9d\036" +
    "\uff9d\037\170\040\161\041\163\042\uff9d\043\uff9d\044\uff9d" +
    "\045\uff9d\046\uff9d\047\uff9d\055\uff9d\056\uff9d\001\002\000" +
    "\056\007\uff98\011\uff98\012\uff98\023\uff98\030\uff98\031\uff98" +
    "\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98\037\uff98\040" +
    "\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045\uff98\046\uff98" +
    "\047\uff98\055\uff98\056\uff98\001\002\000\020\010\155\024" +
    "\146\033\142\050\151\051\143\052\123\054\144\001\002" +
    "\000\004\011\157\001\002\000\056\007\uff90\011\uff90\012" +
    "\uff90\023\uff90\030\uff90\031\uff90\032\uff90\033\uff90\034\uff90" +
    "\035\uff90\036\uff90\037\uff90\040\uff90\041\uff90\042\uff90\043" +
    "\uff90\044\uff90\045\uff90\046\uff90\047\uff90\055\uff90\056\uff90" +
    "\001\002\000\016\010\uff80\024\uff80\050\uff80\051\uff80\052" +
    "\uff80\054\uff80\001\002\000\016\010\uff7b\024\uff7b\050\uff7b" +
    "\051\uff7b\052\uff7b\054\uff7b\001\002\000\016\010\uff7d\024" +
    "\uff7d\050\uff7d\051\uff7d\052\uff7d\054\uff7d\001\002\000\016" +
    "\010\uff7a\024\uff7a\050\uff7a\051\uff7a\052\uff7a\054\uff7a\001" +
    "\002\000\016\010\uff7e\024\uff7e\050\uff7e\051\uff7e\052\uff7e" +
    "\054\uff7e\001\002\000\016\010\uff9a\024\uff9a\050\uff9a\051" +
    "\uff9a\052\uff9a\054\uff9a\001\002\000\016\010\uff81\024\uff81" +
    "\050\uff81\051\uff81\052\uff81\054\uff81\001\002\000\016\010" +
    "\uff7f\024\uff7f\050\uff7f\051\uff7f\052\uff7f\054\uff7f\001\002" +
    "\000\016\010\uff7c\024\uff7c\050\uff7c\051\uff7c\052\uff7c\054" +
    "\uff7c\001\002\000\016\010\155\024\146\050\151\051\143" +
    "\052\123\054\144\001\002\000\056\007\uff99\011\uff99\012" +
    "\uff99\023\uff99\030\uff99\031\uff99\032\uff99\033\uff99\034\uff99" +
    "\035\uff99\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99\043" +
    "\uff99\044\uff99\045\uff99\046\uff99\047\uff99\055\uff99\056\uff99" +
    "\001\002\000\016\010\uff75\024\uff75\050\uff75\051\uff75\052" +
    "\uff75\054\uff75\001\002\000\016\010\uff77\024\uff77\050\uff77" +
    "\051\uff77\052\uff77\054\uff77\001\002\000\016\010\uff74\024" +
    "\uff74\050\uff74\051\uff74\052\uff74\054\uff74\001\002\000\016" +
    "\010\uff76\024\uff76\050\uff76\051\uff76\052\uff76\054\uff76\001" +
    "\002\000\016\010\uff78\024\uff78\050\uff78\051\uff78\052\uff78" +
    "\054\uff78\001\002\000\016\010\uff9f\024\uff9f\050\uff9f\051" +
    "\uff9f\052\uff9f\054\uff9f\001\002\000\016\010\uff79\024\uff79" +
    "\050\uff79\051\uff79\052\uff79\054\uff79\001\002\000\016\010" +
    "\155\024\146\050\151\051\143\052\123\054\144\001\002" +
    "\000\056\007\uff9e\011\uff9e\012\uff9e\023\uff9e\030\167\031" +
    "\164\032\uff9e\033\uff9e\034\162\035\uff9e\036\uff9e\037\170" +
    "\040\161\041\163\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046" +
    "\uff9e\047\uff9e\055\uff9e\056\uff9e\001\002\000\020\010\uff8a" +
    "\024\uff8a\033\uff8a\050\uff8a\051\uff8a\052\uff8a\054\uff8a\001" +
    "\002\000\022\010\155\011\uff8e\024\146\033\142\050\151" +
    "\051\143\052\123\054\144\001\002\000\004\052\207\001" +
    "\002\000\072\007\uff88\010\uff88\011\uff88\012\uff88\015\uff88" +
    "\016\uff88\017\uff88\022\uff88\023\uff88\027\uff88\030\uff88\031" +
    "\uff88\032\uff88\033\uff88\034\uff88\035\uff88\036\uff88\037\uff88" +
    "\040\uff88\041\uff88\042\uff88\043\uff88\044\uff88\045\uff88\046" +
    "\uff88\047\uff88\055\uff88\056\uff88\001\002\000\004\011\215" +
    "\001\002\000\006\011\uff8c\012\uff8c\001\002\000\006\011" +
    "\uff8f\012\213\001\002\000\020\010\155\024\146\033\142" +
    "\050\151\051\143\052\123\054\144\001\002\000\006\011" +
    "\uff8d\012\uff8d\001\002\000\056\007\uff93\011\uff93\012\uff93" +
    "\023\uff93\030\uff93\031\uff93\032\uff93\033\uff93\034\uff93\035" +
    "\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93\043\uff93" +
    "\044\uff93\045\uff93\046\uff93\047\uff93\055\uff93\056\uff93\001" +
    "\002\000\020\010\155\024\146\033\142\050\151\051\143" +
    "\052\123\054\144\001\002\000\004\023\220\001\002\000" +
    "\072\007\uff89\010\uff89\011\uff89\012\uff89\015\uff89\016\uff89" +
    "\017\uff89\022\uff89\023\uff89\027\uff89\030\uff89\031\uff89\032" +
    "\uff89\033\uff89\034\uff89\035\uff89\036\uff89\037\uff89\040\uff89" +
    "\041\uff89\042\uff89\043\uff89\044\uff89\045\uff89\046\uff89\047" +
    "\uff89\055\uff89\056\uff89\001\002\000\060\007\uff91\011\uff91" +
    "\012\uff91\022\222\023\uff91\030\uff91\031\uff91\032\uff91\033" +
    "\uff91\034\uff91\035\uff91\036\uff91\037\uff91\040\uff91\041\uff91" +
    "\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91\047\uff91\055" +
    "\uff91\056\uff91\001\002\000\020\010\155\024\146\033\142" +
    "\050\151\051\143\052\123\054\144\001\002\000\004\023" +
    "\224\001\002\000\056\007\uff92\011\uff92\012\uff92\023\uff92" +
    "\030\uff92\031\uff92\032\uff92\033\uff92\034\uff92\035\uff92\036" +
    "\uff92\037\uff92\040\uff92\041\uff92\042\uff92\043\uff92\044\uff92" +
    "\045\uff92\046\uff92\047\uff92\055\uff92\056\uff92\001\002\000" +
    "\030\005\uffaa\006\uffaa\013\uffaa\014\uffaa\021\uffaa\052\uffaa" +
    "\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\001\002\000" +
    "\016\010\155\024\146\050\151\051\143\052\123\054\144" +
    "\001\002\000\056\007\uff9b\011\uff9b\012\uff9b\023\uff9b\030" +
    "\167\031\164\032\uff9b\033\uff9b\034\162\035\uff9b\036\uff9b" +
    "\037\170\040\161\041\163\042\uff9b\043\uff9b\044\uff9b\045" +
    "\uff9b\046\uff9b\047\uff9b\055\uff9b\056\uff9b\001\002\000\030" +
    "\005\uffad\006\uffad\013\uffad\014\uffad\021\uffad\052\uffad\057" +
    "\uffad\060\uffad\061\uffad\062\uffad\063\uffad\001\002\000\020" +
    "\010\155\024\146\033\142\050\151\051\143\052\123\054" +
    "\144\001\002\000\004\011\233\001\002\000\004\007\234" +
    "\001\002\000\030\005\uffac\006\uffac\013\uffac\014\uffac\021" +
    "\uffac\052\uffac\057\uffac\060\uffac\061\uffac\062\uffac\063\uffac" +
    "\001\002\000\026\005\uffb7\006\uffb7\013\uffb7\014\uffb7\021" +
    "\uffb7\052\uffb7\057\uffb7\061\uffb7\062\uffb7\063\uffb7\001\002" +
    "\000\030\005\uffaf\006\uffaf\013\uffaf\014\uffaf\021\uffaf\052" +
    "\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\001\002" +
    "\000\030\005\uffb1\006\uffb1\013\uffb1\014\uffb1\021\uffb1\052" +
    "\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\001\002" +
    "\000\020\010\155\024\146\033\142\050\151\051\143\052" +
    "\123\054\144\001\002\000\026\007\uffa1\011\uffa1\042\260" +
    "\043\264\044\262\045\265\046\261\047\257\055\uffa1\056" +
    "\uffa1\001\002\000\006\011\247\055\250\001\002\000\012" +
    "\007\uffa3\011\uffa3\055\uffa3\056\uffa3\001\002\000\012\007" +
    "\uffa5\011\uffa5\055\uffa5\056\245\001\002\000\020\010\155" +
    "\024\146\033\142\050\151\051\143\052\123\054\144\001" +
    "\002\000\012\007\uffa4\011\uffa4\055\uffa4\056\uffa4\001\002" +
    "\000\024\005\122\013\133\014\136\021\121\052\123\057" +
    "\127\061\124\062\140\063\135\001\002\000\020\010\155" +
    "\024\146\033\142\050\151\051\143\052\123\054\144\001" +
    "\002\000\012\007\uffa6\011\uffa6\055\uffa6\056\245\001\002" +
    "\000\026\005\uffb9\006\uffb9\013\uffb9\014\uffb9\021\uffb9\052" +
    "\uffb9\057\uffb9\061\uffb9\062\uffb9\063\uffb9\001\002\000\030" +
    "\005\uffc1\006\uffc1\013\uffc1\014\uffc1\021\uffc1\052\uffc1\057" +
    "\uffc1\060\254\061\uffc1\062\uffc1\063\uffc1\001\002\000\024" +
    "\005\122\013\133\014\136\021\121\052\123\057\127\061" +
    "\124\062\140\063\135\001\002\000\026\005\uffb8\006\uffb8" +
    "\013\uffb8\014\uffb8\021\uffb8\052\uffb8\057\uffb8\061\uffb8\062" +
    "\uffb8\063\uffb8\001\002\000\030\005\uffb0\006\uffb0\013\uffb0" +
    "\014\uffb0\021\uffb0\052\uffb0\057\uffb0\060\uffb0\061\uffb0\062" +
    "\uffb0\063\uffb0\001\002\000\020\010\uff82\024\uff82\033\uff82" +
    "\050\uff82\051\uff82\052\uff82\054\uff82\001\002\000\020\010" +
    "\uff87\024\uff87\033\uff87\050\uff87\051\uff87\052\uff87\054\uff87" +
    "\001\002\000\020\010\uff83\024\uff83\033\uff83\050\uff83\051" +
    "\uff83\052\uff83\054\uff83\001\002\000\020\010\uff85\024\uff85" +
    "\033\uff85\050\uff85\051\uff85\052\uff85\054\uff85\001\002\000" +
    "\020\010\155\024\146\033\142\050\151\051\143\052\123" +
    "\054\144\001\002\000\020\010\uff86\024\uff86\033\uff86\050" +
    "\uff86\051\uff86\052\uff86\054\uff86\001\002\000\020\010\uff84" +
    "\024\uff84\033\uff84\050\uff84\051\uff84\052\uff84\054\uff84\001" +
    "\002\000\012\007\uffa2\011\uffa2\055\uffa2\056\uffa2\001\002" +
    "\000\020\010\uff6f\024\uff6f\033\uff6f\050\uff6f\051\uff6f\052" +
    "\uff6f\054\uff6f\001\002\000\020\010\uff71\024\uff71\033\uff71" +
    "\050\uff71\051\uff71\052\uff71\054\uff71\001\002\000\020\010" +
    "\uff6e\024\uff6e\033\uff6e\050\uff6e\051\uff6e\052\uff6e\054\uff6e" +
    "\001\002\000\022\003\305\010\uff73\024\uff73\033\uff73\050" +
    "\uff73\051\uff73\052\uff73\054\uff73\001\002\000\020\010\uffbf" +
    "\024\uffbf\033\uffbf\050\uffbf\051\uffbf\052\uffbf\054\uffbf\001" +
    "\002\000\006\007\uffbd\011\uffbd\001\002\000\006\007\uffbc" +
    "\011\uffbc\001\002\000\022\010\155\011\uff8e\024\146\033" +
    "\142\050\151\051\143\052\123\054\144\001\002\000\020" +
    "\010\uff72\024\uff72\033\uff72\050\uff72\051\uff72\052\uff72\054" +
    "\uff72\001\002\000\020\010\uff70\024\uff70\033\uff70\050\uff70" +
    "\051\uff70\052\uff70\054\uff70\001\002\000\004\011\302\001" +
    "\002\000\006\007\uffbb\011\uffbb\001\002\000\020\010\155" +
    "\024\146\033\142\050\151\051\143\052\123\054\144\001" +
    "\002\000\006\007\uffbe\011\uffbe\001\002\000\004\007\306" +
    "\001\002\000\030\005\uffa7\006\uffa7\013\uffa7\014\uffa7\021" +
    "\uffa7\052\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7" +
    "\001\002\000\010\003\311\007\uffb5\052\123\001\002\000" +
    "\004\007\315\001\002\000\006\007\uffb4\011\uffb4\001\002" +
    "\000\030\010\276\015\274\016\275\017\314\022\204\027" +
    "\206\035\277\036\270\037\300\040\267\041\271\001\002" +
    "\000\006\007\uffb6\011\uffb6\001\002\000\020\010\uff73\024" +
    "\uff73\033\uff73\050\uff73\051\uff73\052\uff73\054\uff73\001\002" +
    "\000\022\003\320\010\155\024\146\033\142\050\151\051" +
    "\143\052\123\054\144\001\002\000\006\007\uffb3\055\250" +
    "\001\002\000\004\007\321\001\002\000\004\007\uffb2\001" +
    "\002\000\010\003\311\011\uffb5\052\123\001\002\000\004" +
    "\011\323\001\002\000\024\005\uffba\013\uffba\014\uffba\021" +
    "\uffba\052\uffba\057\uffba\061\uffba\062\uffba\063\uffba\001\002" +
    "\000\026\005\122\006\325\013\133\014\136\021\121\052" +
    "\123\057\127\061\124\062\140\063\135\001\002\000\030" +
    "\005\uffa8\006\uffa8\013\uffa8\014\uffa8\021\uffa8\052\uffa8\057" +
    "\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8\001\002\000\004" +
    "\052\123\001\002\000\010\011\330\022\204\027\206\001" +
    "\002\000\004\007\331\001\002\000\030\005\uffab\006\uffab" +
    "\013\uffab\014\uffab\021\uffab\052\uffab\057\uffab\060\uffab\061" +
    "\uffab\062\uffab\063\uffab\001\002\000\004\052\013\001\002" +
    "\000\004\052\335\001\002\000\006\011\uffc7\012\uffc7\001" +
    "\002\000\010\011\uffc5\012\uffc5\022\336\001\002\000\004" +
    "\023\337\001\002\000\006\011\uffc4\012\uffc4\001\002\000" +
    "\004\027\341\001\002\000\004\027\342\001\002\000\004" +
    "\052\343\001\002\000\004\011\uffc9\001\002\000\004\005" +
    "\uffe8\001\002\000\012\006\346\020\uffd3\026\050\052\uffd3" +
    "\001\002\000\004\002\001\001\002\000\006\007\ufff3\012" +
    "\ufff3\001\002\000\006\007\361\012\360\001\002\000\010" +
    "\007\ufff2\012\ufff2\022\356\001\002\000\006\007\354\012" +
    "\353\001\002\000\004\052\351\001\002\000\012\005\ufff7" +
    "\025\ufff7\052\ufff7\064\ufff7\001\002\000\006\007\ufff5\012" +
    "\ufff5\001\002\000\004\023\357\001\002\000\006\007\ufff1" +
    "\012\ufff1\001\002\000\004\052\351\001\002\000\012\005" +
    "\ufff6\025\ufff6\052\ufff6\064\ufff6\001\002\000\006\007\ufff4" +
    "\012\ufff4\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\361\000\004\003\003\001\001\000\002\001\001\000" +
    "\004\041\006\001\001\000\002\001\001\000\004\031\007" +
    "\001\001\000\014\006\013\012\015\030\014\033\016\044" +
    "\010\001\001\000\006\035\346\036\351\001\001\000\004" +
    "\005\344\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\035\001\001\000\004\044\021\001\001\000\006\034" +
    "\024\050\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\050\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\002\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\041\001\001\000\002\001\001\000\004" +
    "\044\343\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\043\001\001\000\010\025\050\037\051\070\046" +
    "\001\001\000\004\005\066\001\001\000\002\001\001\000" +
    "\004\071\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\054\001" +
    "\001\000\006\026\057\027\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\071\070" +
    "\067\001\001\000\006\044\072\045\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\072\076\001\001\000\002" +
    "\001\001\000\014\010\103\013\105\014\104\040\102\044" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\073\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\107\013\110\044\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\113\001\001\000\006\006\115\044\010\001\001" +
    "\000\004\074\116\001\001\000\002\001\001\000\004\017" +
    "\117\001\001\000\016\011\131\020\130\021\133\022\125" +
    "\032\127\042\124\001\001\000\002\001\001\000\004\017" +
    "\323\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\063\272\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\011\131\021\235" +
    "\022\234\032\127\042\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\042\146\046\144" +
    "\047\153\051\147\052\152\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\077\225\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\044\220\001\001\000\002\001\001\000\010\060\177" +
    "\066\200\067\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\061\164\064\165\065\157\001\001\000\002" +
    "\001\001\000\014\042\146\046\155\047\153\051\147\052" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\100\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\042" +
    "\146\047\171\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\076\201\001\001\000\002\001\001" +
    "\000\010\042\146\047\153\052\202\001\001\000\010\061" +
    "\164\064\165\065\157\001\001\000\004\101\215\001\001" +
    "\000\020\015\207\016\211\042\146\046\210\047\153\051" +
    "\147\052\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\042\146\046\213\047\153\051\147\052\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\042\146\046" +
    "\216\047\153\051\147\052\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\042\146\046" +
    "\222\047\153\051\147\052\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\042\146\047" +
    "\153\052\226\001\001\000\010\061\164\064\165\065\157" +
    "\001\001\000\002\001\001\000\014\042\146\046\231\047" +
    "\153\051\147\052\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\042\146\046\240\047\153" +
    "\051\147\052\152\053\241\054\243\055\242\001\001\000" +
    "\004\062\262\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\042\146\046\240\047\153\051" +
    "\147\052\152\055\245\001\001\000\002\001\001\000\016" +
    "\011\131\020\251\021\252\022\125\032\127\042\124\001" +
    "\001\000\020\042\146\046\240\047\153\051\147\052\152" +
    "\054\250\055\242\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\011\131\021\255\022\254" +
    "\032\127\042\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\042\146\046\265\047\153\051" +
    "\147\052\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\075\302\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\015\300\016" +
    "\211\042\146\046\210\047\153\051\147\052\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\042\146\046\303\047\153\051\147" +
    "\052\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\032\312\042\311\057\307\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\063\272\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\042\146" +
    "\046\240\047\153\051\147\052\152\053\315\054\243\055" +
    "\242\056\316\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\032\312\042\311\057\321\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\011\131" +
    "\020\130\021\133\022\125\032\127\042\124\001\001\000" +
    "\002\001\001\000\004\042\326\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\333\044" +
    "\332\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\071\070\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\354\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\361\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	Tab.init(); // Universe scope
	boolType = new Struct(Struct.None);
	Tab.currentScope().addToLocals(new Obj(Obj.Type, "bool", boolType));

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }



	int globProm = 0;
	int lokProm = 0;
	int globKon = 0;
	
	int globIStaticFunc = 0;
	int pozivFunkUMain = 0;
	int deklFormArg = 0;

	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
	Struct boolType;
	Obj lastArrayIndex;
	Obj lastArrayStoreIndex;
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
		System.err.println(msg.toString());
 //       log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


	Obj currentMethod = null;
	Obj currentClass = null;
	Obj lastArrayDesignator = null;
	Obj lastArrayStoreDesignator = null;
	Obj temp = null;
	boolean returnFound = false;
	
	boolean rightOp = false;
	boolean extendClass = false;
	
	boolean fieldsStatic = false;
	ArrayList<Struct> actualParams = new ArrayList();
	
	Struct currentType = null;
	
	boolean inFor = false;
	boolean isVoid = false;
	
	boolean checkMethodParams(Obj func, int line) {
		HashMap<Integer, Struct> formPars = new HashMap<Integer, Struct>();
		Struct varArgsType = null;
		for (Obj locVar : func.getLocalSymbols()) {
			if (locVar.getFpPos() > 0) {
				if (locVar.getLocalSymbols().isEmpty()) //ako je ovo prazno znaci da su obicni parametri inace smo napravili da to budu promenljivi 
					formPars.put(locVar.getFpPos(), locVar.getType()); 
				else {
					varArgsType = locVar.getType().getElemType();
				}
			}
		}
		int varArgsLength = 0;
		if (varArgsType == null && formPars.size() != actualParams.size()) {
			parser.report_info("Greska: ne poklapa se broj stvarnih i formalnih argumenata ", null);	
		}
		else {
			if (actualParams.size() < formPars.size()) {
				parser.report_info("Greska: ne poklapa se broj stvarnih i formalnih argumenata ", null);	
			}
			else if (actualParams.size() > formPars.size()){
				varArgsLength = actualParams.size() - formPars.size();
				while (actualParams.size() > formPars.size()) {
					formPars.put(formPars.size() + 1, varArgsType);
				}
			}
			for (int i = 0; i < actualParams.size(); i++) {
				if (!actualParams.get(i).assignableTo(formPars.get(i+1))) {
					parser.report_info("Greska: stvarni i formalni argument se ne poklapaju po tipu ", null);
				}				
			}
		}
		
		if (varArgsLength > 0) {
			Obj varArgsArray = Tab.insert(Obj.Var, "varArgsArray", new Struct(Struct.Array, varArgsType));
			Code.loadConst(varArgsLength);
			Code.put(Code.newarray);
			if (varArgsType == Tab.intType) {
				Code.put(1); //rezervisemo toliko za jedan element 4B
			}
			else if (varArgsType == Tab.charType) {
				Code.put(0);
			}
			Code.store(varArgsArray); //ovde storujuemo adresu niza koja je ostala na Expr steku 
			for (int i = varArgsLength - 1; i >= 0; i--) {
				Code.store(temp);
				Code.load(varArgsArray);
				Code.loadConst(i);
				Code.load(temp);
				if (varArgsType.getKind() == Struct.Char)
					Code.put(Code.bastore);
				else
					Code.put(Code.astore); 
			}
			Code.load(varArgsArray); 
		}
	
		actualParams.clear();
		return true;
	}

	class FactorType {
		private Obj designator;
		private Struct type;
		
		public FactorType(Obj d, Struct t) {
			designator = d;
			type = t;
		}
		
		public Obj getDesignator() {
			return designator;
		}
		
		public void setDesignator(Obj d) {
			designator = d;
		}
		
		public Struct getType() {
			return type;
		}
		
		public void setType(Struct t) {
			type = t;
		}
	}

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // AssignOp ::= MODEQUAL 
            {
              Integer RESULT =null;
		
					RESULT = Code.rem;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignOp",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // AssignOp ::= DIVEQUAL 
            {
              Integer RESULT =null;
		
					RESULT = Code.div;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignOp",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // AssignOp ::= MULEQUAL 
            {
              Integer RESULT =null;
		
					RESULT = Code.mul;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignOp",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // AssignOp ::= MINUSEQUAL 
            {
              Integer RESULT =null;
		
					RESULT = Code.sub;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignOp",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // AssignOp ::= PLUSEQUAL 
            {
              Integer RESULT =null;
		
					RESULT = Code.add;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignOp",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // AssignOp ::= EQUAL 
            {
              Integer RESULT =null;
		
					RESULT = 0;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignOp",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // AddopRight ::= MINUSEQUAL 
            {
              Integer RESULT =null;
		 
					RESULT = Code.sub;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // AddopRight ::= PLUSEQUAL 
            {
              Integer RESULT =null;
		 
					RESULT = Code.add; 
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // AddopLeft ::= MINUS 
            {
              Integer RESULT =null;
		 
			RESULT = Code.sub;
          
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // AddopLeft ::= PLUS 
            {
              Integer RESULT =null;
		 
			RESULT = Code.add; 
          
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Addop ::= AddopRight 
            {
              Integer RESULT =null;
		int addopCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int addopCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer addopCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				rightOp = true;
				RESULT = addopCode;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Addop ::= AddopLeft 
            {
              Integer RESULT =null;
		int addopCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int addopCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer addopCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				RESULT = addopCode;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // MulopRight ::= MODEQUAL 
            {
              Integer RESULT =null;
		 
			RESULT = Code.rem; 
          
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // MulopRight ::= DIVEQUAL 
            {
              Integer RESULT =null;
		 
			RESULT = Code.div; 
          
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // MulopRight ::= MULEQUAL 
            {
              Integer RESULT =null;
		 
			RESULT = Code.mul; 
          
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // MulopLeft ::= MOD 
            {
              Integer RESULT =null;
		 
			RESULT = Code.rem; 
          
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // MulopLeft ::= DIV 
            {
              Integer RESULT =null;
		 
			RESULT = Code.div; 
          
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // MulopLeft ::= MUL 
            {
              Integer RESULT =null;
		 
			RESULT = Code.mul; 
          
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Mulop ::= MulopRight 
            {
              Integer RESULT =null;
		int mulopCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mulopCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer mulopCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				rightOp = true;
				RESULT = mulopCode;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Mulop ::= MulopLeft 
            {
              Integer RESULT =null;
		int mulopCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mulopCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer mulopCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				RESULT = mulopCode;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Relop ::= LESSEQUAL 
            {
              Integer RESULT =null;
		 
		RESULT = Code.le;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Relop ::= LESS 
            {
              Integer RESULT =null;
		
		RESULT = Code.lt; 
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Relop ::= MOREEQUAL 
            {
              Integer RESULT =null;
		
		RESULT = Code.ge;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Relop ::= MORE 
            {
              Integer RESULT =null;
		
		RESULT = Code.gt;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Relop ::= DIFERENT 
            {
              Integer RESULT =null;
		 
		RESULT = Code.ne;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Relop ::= CONDITIONALEQUAL 
            {
              Integer RESULT =null;
		 
		RESULT = Code.eq; 
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Designator ::= Designator DOT IDENT 
            {
              Obj RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj obj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					if(obj.getType().getKind() != Struct.Class)
						parser.report_error("Greska na liniji " + nameleft+ " : izraz nije klasnog tipa! ", null);
					
					Obj member = obj.getType().getMembers().searchKey(name);
					
					if(member != null) {
						RESULT = member;
						if (obj.getKind() == Obj.Type && member.getFpPos() == 0) {
							parser.report_error("Greska na liniji " + objleft+ " nije staticka metoda, a pristupa joj se preko imena klase ", null);
						}
					}
					else {
						parser.report_error("Greska na liniji " + nameleft+ " : ime "+name+" nije polje klase! ", null);
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Designator ::= Designator LSQUARE NT$8 Expr RSQUARE 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int objleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj obj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct expr = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
					if(expr == Tab.intType) {
						RESULT = new Obj(Obj.Elem, "", obj.getType().getElemType());
						Code.store(parser.lastArrayIndex);
						Code.load(parser.lastArrayIndex);
					}
					else {
						parser.report_error("Greska na liniji " + exprleft+ " : ime "+expr+" nije int! ", null);
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$8 ::= 
            {
              Obj RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj obj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

					if(obj.getType().getKind() != Struct.Array)
						parser.report_error("Greska na liniji " + objleft+ " : izraz nije niz! ", null);
					
					Code.load(obj);
					lastArrayDesignator = obj;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$8",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Designator ::= IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					Obj obj = Tab.find(name);
					if (obj == Tab.noObj) { 
						parser.report_error("Greska na liniji " + nameleft+ " : ime "+name+" nije deklarisano! ", null);
					}
					RESULT = obj;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ActualParamList ::= Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						actualParams.add(e);
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParamList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ActualParamList ::= ActualParamList COMMA Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						actualParams.add(e);
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParamList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ActualPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualPars",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ActualPars ::= ActualParamList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualPars",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Factor ::= LPAREN Expr RPAREN 
            {
              FactorType RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct expr = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				RESULT = new FactorType(null, expr);
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Factor ::= NEW Type 
            {
              FactorType RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				RESULT = new FactorType(null, varType);
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Factor ::= NEW Type LSQUARE Expr RSQUARE 
            {
              FactorType RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct expr = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
		        if (expr != Tab.intType)
			  	parser.report_error("Semanticka greska na liniji " + exprleft + ": Expr mora biti int tipa", null);
				Code.put(Code.newarray);
				if (varType == Tab.intType) {
					Code.put(1);
				}
				else if (varType == Tab.charType) {
					Code.put(0);
				}
				else {
					parser.report_error("Greska na liniji " + varTypeleft+" : ime " + varType + " nije tipa char ili int!", null);
				}
				RESULT = new FactorType(null, new Struct(Struct.Array, varType));
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Factor ::= Designator LPAREN ActualPars RPAREN 
            {
              FactorType RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
			 if (currentMethod != null && currentClass == null && currentMethod.getName().equals("main"))
				parser.pozivFunkUMain++;
		       if (Obj.Meth == func.getKind()) { 
		   	   	   parser.report_info("Pronadjen poziv funkcije " + func.getName() + " na liniji " + funcleft, null);
		   	   	   if (func.getType() == Tab.noType) { 
		   	   	   		parser.report_error("Semanticka greska " + func.getName() + " ne moze se koristiti u izrazima jer nema povratnu vrednost, linija " + funcleft, null);
		   	   	   	}
		   	   	   	else if (checkMethodParams(func, funcleft)) {
						int destAdr = func.getAdr() - Code.pc;
		   	   	   		Code.put(Code.call);
		   	   	   		Code.put2(destAdr);
		   	   	   }
				   RESULT = new FactorType(func, func.getType());
		   	   } else {
		   	   	   parser.report_error("Greska na liniji " + funcleft+" : ime " + func.getName() + " nije funkcija!", null);
		   	   	   RESULT = new FactorType(func, Tab.noType);
		   	   }
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Factor ::= Designator 
            {
              FactorType RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
				Code.load(d);
				RESULT = new FactorType(d, d.getType());
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Factor ::= BOOL 
            {
              FactorType RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			   Obj c = new Obj(Obj.Con, "", parser.boolType);
				c.setAdr(b ? 1 : 0);
				Code.load(c);
				RESULT = new FactorType(c, parser.boolType); 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Factor ::= CHARACTER 
            {
              FactorType RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character i = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				Obj c = new Obj(Obj.Con, "", Tab.charType);
				c.setAdr(i.charValue());
				Code.load(c);
				RESULT = new FactorType(c, Tab.charType); 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Factor ::= NUMBER 
            {
              FactorType RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				Obj c = new Obj(Obj.Con, "", Tab.intType);
				c.setAdr(i.intValue());
				Code.load(c);
				RESULT = new FactorType(c, Tab.intType); 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Term ::= Factor 
            {
              FactorType RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		FactorType f = (FactorType)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = f; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Term ::= Term Mulop NT$7 Factor 
            {
              FactorType RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (FactorType) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		FactorType f1 = (FactorType)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int mulopCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int mulopCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer mulopCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		FactorType f2 = (FactorType)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					if (f1.getType().equals(f2.getType()) && f1.getType() == Tab.intType) {
						if (rightOp  == true && (f1.getDesignator().getKind() == Obj.Var || f1.getDesignator().getKind() == Obj.Elem || f1.getDesignator().getKind() == Obj.Fld)) {
							Code.put(mulopCode);
							if (f1.getDesignator().getKind() == Obj.Elem) {
								Code.store(temp);
								Code.load(lastArrayStoreDesignator);
								Code.load(parser.lastArrayStoreIndex);
								Code.load(temp);
							}
							Code.store(f1.getDesignator());
							if (f1.getDesignator().getKind() == Obj.Elem) {
								Code.load(lastArrayStoreDesignator);
								Code.load(parser.lastArrayStoreIndex);
							}
							Code.load(f1.getDesignator());
							rightOp = false;
							RESULT = f1;							
						}
						else if (rightOp == false) {
							Code.put(mulopCode);
							RESULT = f1;
						}
						else
							parser.report_error("Greska na liniji "+ f1left+" : nekompatibilni tipovi u izrazu za mozenje.", null);
					}
					else {
						parser.report_error("Greska na liniji "+ f1left+" : nekompatibilni tipovi u izrazu za mozenje.", null);
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$7 ::= 
            {
              FactorType RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		FactorType f1 = (FactorType)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int mulopCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mulopCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer mulopCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

					if (rightOp  == true && f1.getDesignator().getKind() == Obj.Elem) {
						lastArrayStoreDesignator = lastArrayDesignator;
						Code.load(parser.lastArrayIndex);
						Code.store(parser.lastArrayStoreIndex);
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$7",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ExprFactorType ::= MINUS NT$6 Term 
            {
              FactorType RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (FactorType) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		FactorType t = (FactorType)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					Code.put(Code.sub);
					RESULT = t;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprFactorType",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$6 ::= 
            {
              FactorType RESULT =null;
 
					Code.loadConst(0);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ExprFactorType ::= Term 
            {
              FactorType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		FactorType t = (FactorType)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = t; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprFactorType",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ExprFactorType ::= ExprFactorType Addop NT$5 Term 
            {
              FactorType RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (FactorType) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		FactorType t1 = (FactorType)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int addopCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int addopCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer addopCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		FactorType t2 = (FactorType)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				if (t1.getType().equals(t2.getType()) && t1.getType().equals(Tab.intType)) {
					if (rightOp  == true && (t1.getDesignator().getKind() == Obj.Var || t1.getDesignator().getKind() == Obj.Elem || t1.getDesignator().getKind() == Obj.Fld)) {
						Code.put(addopCode);
						if (t1.getDesignator().getKind() == Obj.Elem) {
							Code.store(temp);
							Code.load(lastArrayStoreDesignator);
							Code.load(parser.lastArrayStoreIndex);
							Code.load(temp);
						}
						Code.store(t1.getDesignator());
						if (t1.getDesignator().getKind() == Obj.Elem) {
							Code.load(lastArrayStoreDesignator);
							Code.load(parser.lastArrayStoreIndex);
						}
						Code.load(t1.getDesignator());
						rightOp = false;	
						RESULT = t1;
					}
					else if (rightOp == false) {
						Code.put(addopCode);
						RESULT = t1;
					}
					else
						parser.report_error("Greska na liniji "+ t1left+" : nekompatibilni tipovi u izrazu za sabiranje.", null);
				}
				else {
					parser.report_error("Greska na liniji "+ t1left+" : nekompatibilni tipovi u izrazu za sabiranje.", null);
					RESULT = new FactorType(null, Tab.noType);
				}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprFactorType",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$5 ::= 
            {
              FactorType RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		FactorType t1 = (FactorType)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int addopCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int addopCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer addopCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

					if (rightOp  == true && t1.getDesignator().getKind() == Obj.Elem) {
						lastArrayStoreDesignator = lastArrayDesignator;
						Code.load(parser.lastArrayIndex);
						Code.store(parser.lastArrayStoreIndex);
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expr ::= ExprFactorType 
            {
              Struct RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		FactorType e = (FactorType)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			RESULT = e.getType();
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CondFact ::= Expr 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			if(t != parser.boolType) 
			parser.report_error("Greska na liniji "+ tleft+" : uslov nije tipa bool", null);
		 	RESULT = new Obj(Obj.Con, "", t);
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CondFact ::= Expr Relop Expr 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct t1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t2 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
         	if(!t1.assignableTo(t2) && t1.getKind() != Struct.Array && t1.getElemType().getKind() != Struct.Char)
         	{
         		parser.report_error("Greska na liniji: "+t1left+": nekompatibilni tipovi", null);
         	}
         	else if(t1.getKind() == Struct.Class || t1.getKind() == Struct.Array)
         	{
         		if(o != Code.ne && o != Code.eq)
         		{
         			parser.report_error("Semanticka greska na liniji: "+t2left+" : Uz promenljive tipa klase ili niza, od relacionih operatora, mogu se koristiti samo != i ==.", null);
         		}
         	}
         	else {
         		Obj ret = new Obj(Obj.Con,"",Tab.intType);
         		
         		int a, b;
         		a = Code.get(Code.pc);
         		b = Code.get(Code.pc);
         		
 /*        		switch(o) {
         		
         		case "MORE" :
							if(a > b) o.setAdr(1);
							else o.setAdr(0);							         		
         		 			break;
         		case "MOREEQUAL": 
							if(a >= b) o.setAdr(1);
							else o.setAdr(0);	
         					break;
          		case "LESS":
							if(a < b) o.setAdr(1);
							else o.setAdr(0);	
          					break; 		
         		case "LESSEQUAL":	
							if(a <= b) o.setAdr(1);
							else o.setAdr(0);	
         					break;	
         		}*/        	
         	}
         
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CondTerm ::= CondFact 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CondTerm ::= CondTerm AND CondFact 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
/*			if( (c1.getAdr() != 0 ) && (c2.getAdr() != 0) ){
		  		RESULT = c2;
			}
			else {
				c2.setAdr(0);			  	
				RESULT = c2;				  	
			}*/
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Condition ::= CondTerm 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Condition ::= Condition OR CondTerm 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
/*				if( (c1.getAdr() == 0 ) && (c2.getAdr() == 0) ){
		  			RESULT = c2;
				}
				else {
					c2.setAdr(1);			  	
					RESULT = c2;				  	
				}*/
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Matched ::= Designator EQUAL error SEMI 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
					    parser.log.debug("Uspesan oporavak od greske pri konstrukciji iskaza dodele vrednosti do ; u liniji "+lleft); 
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Matched ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Matched ::= RETURN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Matched ::= RETURN Expr SEMI 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
			     
			  	 returnFound = true;
				 Struct currMethType = currentMethod.getType();
				 if (!currMethType.compatibleWith(t) || isVoid == false && t == null ) {
				 	parser.report_error("Greska na liniji " + tleft + " : " + "tip izraza u return naredbi ne slaze se sa tipom povratne vrednosti funkcije " + currentMethod.getName(), null);
				 }			  	 
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Matched ::= READ LPAREN Designator RPAREN SEMI 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
					 if (currentMethod != null && currentClass == null && currentMethod.getName().equals("main"))
						parser.pozivFunkUMain++;
			  		if (d.getKind() == Obj.Var || d.getKind() == Obj.Elem || d.getKind() == Obj.Fld) {
			  			if (d.getType().getKind() == Struct.Int || d.getType().getKind() == Struct.Char || d.getType().equals(parser.boolType)) {
			  				Code.put(Code.read);
			  				Code.store(d);
			  			} else {
			  				parser.report_error("Greska na liniji " + dleft + ": designator nije odgovarajuceg tipa.", null);
			  			}
			  		}

			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Matched ::= PRINT LPAREN Expr RPAREN SEMI 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
				 if (currentMethod != null && currentClass == null && currentMethod.getName().equals("main"))
					parser.pozivFunkUMain++;
			  	 if (t != Tab.intType && t != Tab.charType && t != parser.boolType)
			  	 	parser.report_error("Semanticka greska na liniji " + tleft + ": Operand instrukcije PRINT mora biti char ili int tipa", null);
			  	 if (t == Tab.intType) {
			  	 	Code.loadConst(5);
			  	 	Code.put(Code.print);
			  	 }
			  	 
			  	 if (t == Tab.charType) {
			  	 	Code.loadConst(1);
			  	 	Code.put(Code.bprint);
			  	 }
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Matched ::= CONTINUE SEMI 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
					if (!inFor) {
						parser.report_error("Semanticka greska na liniji " + bleft + ": CONTINUE se moze koristiti samo unutar FOR petlje", null);
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Matched ::= BREAK SEMI 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
					if (!inFor) {
						parser.report_error("Semanticka greska na liniji " + bleft + ": BREAK se moze koristiti samo unutar FOR petlje", null);
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Matched ::= ForPart Matched 
            {
              Object RESULT =null;
		 inFor = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Matched ::= IF LPAREN Condition RPAREN Matched ELSE Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Matched ::= DesignatorStatement SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OptCondition ::= error 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptCondition",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OptCondition ::= Condition 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptCondition",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OptDesignatorStatement ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							parser.log.debug("Uspesan oporavak od greske unutar for petlje do prvog znaka ; ili ) " +eleft);
							
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptDesignatorStatement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OptDesignatorStatement ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptDesignatorStatement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OptDesignatorStatement ::= DesignatorStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptDesignatorStatement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Unmatched ::= ForPart Unmatched 
            {
              Object RESULT =null;
		 inFor = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Unmatched ::= IF LPAREN Condition RPAREN Matched ELSE Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Unmatched ::= IF LPAREN Condition RPAREN Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ForPart ::= FOR LPAREN OptDesignatorStatement SEMI OptCondition SEMI OptDesignatorStatement RPAREN 
            {
              Object RESULT =null;
		 inFor = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForPart",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DesignatorStatement ::= Designator LPAREN ActualPars RPAREN 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
				 if (currentMethod != null && currentClass == null && currentMethod.getName().equals("main"))
					parser.pozivFunkUMain++;
		         if (Obj.Meth == func.getKind()) { 
		   	   	    parser.report_info("Pronadjen poziv funkcije " + func.getName() + " na liniji " + funcleft, null);
					if (checkMethodParams(func, funcleft)) {
						int destAdr = func.getAdr() - Code.pc;
						Code.put(Code.call);
						Code.put2(destAdr);
						if (func.getType() != Tab.noType)
							Code.put(Code.pop);
					}
		   	     } 
		   	     else {
		   	   	    parser.report_error("Greska na liniji " + funcleft+" : ime " + func.getName() + " nije funkcija!", null);
		   	     } 
		      
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DesignatorStatement ::= Designator DEC 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
		      		if (d.getKind() != Obj.Var || d.getKind() != Obj.Elem || d.getKind() != Obj.Fld) {
		      			if (d.getType().getKind() != Struct.Int)
							parser.report_error("Greska na liniji " + dleft+" : Designator nije tipa int, pa ne moze biti dekrementiran.", null);	
			      		
						// if(d.getKind() == Obj.Elem) {
						// 	Code.put(Code.dup2);
						// }
			      		
			      		Code.load(d);
			      		Code.loadConst(1);
			      		Code.put(Code.sub);
			      		Code.store(d);

		      		}
		      		else {
		      			parser.report_error("Greska na liniji " + dleft+" : Designator nije varijabla, element niza ili polje klase, pa ne moze biti dekrementiran.", null);
		      		}
		      
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DesignatorStatement ::= Designator INC 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
		      		if (d.getKind() == Obj.Var || d.getKind() == Obj.Elem || d.getKind() == Obj.Fld) {
		      			if (d.getType().getKind() != Struct.Int)
							parser.report_error("Greska na liniji " + dleft+" : Designator nije tipa int, pa ne moze biti inkrementiran.", null);

						// if(d.getKind() == Obj.Elem) {
						// 	Code.put(Code.dup2);
						// }

						Code.load(d);
			      		Code.loadConst(1);
			      		Code.put(Code.add);
			      		Code.store(d);
		      		}
		      		else {
		      			parser.report_error("Greska na liniji " + dleft+" : Designator nije varijabla, element niza ili polje klase, pa ne moze biti inkrementiran.", null);
		      		}
		      
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DesignatorStatement ::= Designator AssignOp NT$4 Expr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int opCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int opCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer opCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			    if (!(dest.getKind() == Obj.Var || dest.getKind() == Obj.Elem || dest.getKind() == Obj.Fld)) {
					parser.report_error("Greska na liniji " + destleft+" : Designator nije varijabla, element niza ili polje unutar objekta", null);
				}
				else if (!e.assignableTo(dest.getType()))
					parser.report_error("Greska na liniji " + destleft + " : " + " nekompatibilni tipovi u dodeli vrednosti ", null);
				else {
					if (opCode != 0) {
						Code.put(opCode);
					}
					Code.store(dest);
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$4 ::= 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int opCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer opCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

				if (opCode != 0)
					Code.load(dest);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Statement ::= Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Statement ::= Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FormalParamDecl ::= Type IDENT LSQUARE RSQUARE 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				parser.report_info("Deklarisan niz "+ varName+" na liniji "+ varNameleft, null);
				Obj sym = Tab.currentScope().findSymbol(varName);
				     if (sym == null) {
						Obj obj = Tab.insert(Obj.Var, varName, new Struct(Struct.Array, currentType));
						obj.setFpPos(Tab.currentScope().getnVars() + 1);
					}
				    else {
						parser.report_info("Greska na liniji, nije jedinstveno ime "+ varNameleft, null);
				    }
				
				parser.deklFormArg++;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamDecl",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FormalParamDecl ::= Type IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				parser.report_info("Deklarisana promenljiva "+ varName+" na liniji "+ varNameleft, null);
				   Obj sym = Tab.currentScope().findSymbol(varName);
				     if (sym == null) {
						Obj obj = Tab.insert(Obj.Var, varName, currentType);
						obj.setFpPos(Tab.currentScope().getnVars());
					}
				    else {
						parser.report_info("Greska na liniji, nije jedinstveno ime "+ varNameleft, null);
				    }
				
				parser.deklFormArg++;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamDecl",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FormPars ::= FormalParamDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FormPars ::= error COMMA FormalParamDecl 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
					parser.log.debug("Uspesan oporavak od greske pri deklaraciji formalnog parametra funkcije do , u liniji " +eleft);
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FormPars ::= FormPars COMMA FormalParamDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VarArgs ::= Type DOT DOT DOT IDENT 
            {
              Object RESULT =null;
		int nizleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nizright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String niz = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				Obj obj = Tab.insert(Obj.Var, niz, new Struct(Struct.Array, currentType));
				obj.setFpPos(Tab.currentScope().getnVars());
				HashTableDataStructure locals = new HashTableDataStructure();
				locals.insertKey(Tab.noObj);
				obj.setLocals(locals);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarArgs",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FormArgs ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormArgs",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FormArgs ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				parser.log.debug("Uspesan oporavak od greske pri deklaraciji formalnog parametra funkcije do ) u liniji " +eleft);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormArgs",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FormArgs ::= VarArgs 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormArgs",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FormArgs ::= FormPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormArgs",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FormArgs ::= FormPars COMMA VarArgs 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormArgs",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // MethodDecl ::= OptStatic RetType IDENT NT$1 LPAREN FormArgs NT$2 RPAREN VarDeclList LBRACE NT$3 StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).value;
		
			   	 if (!returnFound && retType != Tab.noType)
			   	 	parser.report_error("Semanticka greska na liniji " + methNameleft + ": funcija " + methName + " nema return iskaz!", null);
				
				 Code.put(Code.exit);
				 Code.put(Code.return_);
				  
				 Tab.chainLocalSymbols(currentMethod);
			   	 Tab.closeScope();
			   	 
				 returnFound = false;
				 currentMethod = null;
				 isVoid = false;
				 
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
 
			   		currentMethod.setAdr(Code.pc);
			   		if ("main".equals(methName)) {
			   			Code.mainPc = currentMethod.getAdr();
			   		}
			   		Code.put(Code.enter);
					Code.put(currentMethod.getLevel());
			   		Code.put(Tab.currentScope().getnVars());
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
 
			   		currentMethod.setLevel(Tab.currentScope().getnVars());
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$1 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

				    Obj sym = Tab.currentScope().findSymbol(methName);
				     if (sym == null)
						currentMethod = Tab.insert(Obj.Meth, methName, retType);
				    else {
						parser.report_info("Greska na liniji, nije jedinstveno ime "+ methNameleft, null);
						currentMethod = new Obj (Obj.Meth, methName, retType);
				    }
					parser.report_info("Obradjuje se funkcija " + methName + " na liniji " + methNameleft, null);
					Tab.openScope();
					if(b) {
						currentMethod.setFpPos(1);
						parser.globIStaticFunc++;
					}
					else if (currentClass == null)
						parser.globIStaticFunc++;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OptStatic ::= 
            {
              Boolean RESULT =null;
		
					RESULT = false;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptStatic",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OptStatic ::= STATIC 
            {
              Boolean RESULT =null;
		
					RESULT = true;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptStatic",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // RetType ::= VOID 
            {
              Struct RESULT =null;
		
			RESULT = Tab.noType;
			isVoid = true;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RetType",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // RetType ::= Type 
            {
              Struct RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			RESULT = type;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RetType",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ClassDeclMethod ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDeclMethod",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ClassDeclMethod ::= error LBRACE 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		parser.log.debug("Uspesan oporavak od greske pri deklaraciji polja unutrasnje klase do { u liniji " +lleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDeclMethod",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ClassDeclMethod ::= LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDeclMethod",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ClassDecl ::= CLASS ClassIdent ExtType LBRACE ClassVarDeclList ClassDeclMethod RBRACE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		
				Tab.chainLocalSymbols(o.getType());  //zasto je ovde o.getType
				Tab.closeScope(); 
				currentClass = null;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ClassIdent ::= IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		  
				Obj sym = Tab.currentScope().findSymbol(name);
				if (sym == null)
					currentClass = RESULT = Tab.insert(Obj.Type, name, new Struct(Struct.Class));
				else {
					parser.report_info("Greska na liniji, nije jedinstveno ime "+ nameleft, null);
					currentClass = RESULT = new Obj (Obj.Type, name, new Struct(Struct.Class));
				}
				Tab.openScope(); 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassIdent",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SingleClassVarDecl ::= IDENT LSQUARE RSQUARE 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				parser.report_info("Deklarisano polje klase "+ varName+" na liniji "+ varNameleft, null);
				Obj sym = Tab.currentScope().findSymbol(varName);
				if (sym == null) {
					Obj field = Tab.insert(Obj.Fld, varName, new Struct(Struct.Array, currentType));
					if (fieldsStatic)
						field.setFpPos(1);
				}
				else {
					parser.report_info("Greska na liniji, nije jedinstveno ime "+ varNameleft, null);	
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SingleClassVarDecl",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SingleClassVarDecl ::= IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				parser.report_info("Deklarisano polje klase "+ varName+" na liniji "+ varNameleft, null);
				
				Obj sym = Tab.currentScope().findSymbol(varName);
				if (sym == null) {
					Obj field = Tab.insert(Obj.Fld, varName, currentType); 
					if (fieldsStatic)
						field.setFpPos(1);
				}
				else {
					parser.report_info("Greska na liniji, ime nije jedinstveno: "+ varNameleft, null);	
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SingleClassVarDecl",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassVarDeclPart ::= SingleClassVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDeclPart",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassVarDeclPart ::= ClassVarDeclPart COMMA SingleClassVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDeclPart",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassVarDecl ::= OptStatic NT$0 Type ClassVarDeclPart SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		 fieldsStatic = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDecl",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$0 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 if (b) fieldsStatic = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassVarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDeclList",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassVarDeclList ::= ClassVarDeclList ClassVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDeclList",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ExtType ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtType",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ExtType ::= error 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.log.debug("Uspesan oporavak pri prosirenju klase do { u liniji " +lleft);
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtType",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ExtType ::= EXTENDS Type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			if(t.getKind() != Struct.Class){
				parser.report_error("Semanticka greska na liniji " +tleft +": Ime "+t+" nije unutrasnja klasa glavnog programa", null);
			}
			extendClass = true;
			RESULT = t;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtType",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			Obj typeNode = Tab.find(typeName);
			if (typeNode == Tab.noObj) {
				parser.report_error("Nije pronadjen tip " + typeName + " u tabeli simbola", null);
				currentType = RESULT = Tab.noType;
			}
			else {
				if (Obj.Type == typeNode.getKind()) {
					currentType = RESULT = typeNode.getType();
				}
				else {
					parser.report_error("Greska na liniji" + typeNameleft+ ": Ime " + typeName + " ne predstavlja tip ", null);
					currentType = RESULT = Tab.noType;
				}
			}
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ConstValue ::= BOOL 
            {
              Integer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					RESULT = b ? 1 : 0;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstValue",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ConstValue ::= CHARACTER 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					RESULT = (int)c.charValue();
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstValue",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ConstValue ::= NUMBER 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					RESULT = n;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstValue",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SingleConstDecl ::= IDENT EQUAL ConstValue 
            {
              FactorType RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				parser.report_info("Deklarisana konstanta "+ varName+" na liniji "+ varNameleft, null);
				
				
				Obj sym = Tab.currentScope().findSymbol(varName);
				if (sym == null) {
					Obj result = Tab.insert(Obj.Con, varName, currentType);
					result.setAdr(c);
					parser.globKon++;
				}
				else {
					parser.report_info("Greska na liniji, nije jedinstveno ime: "+ varNameleft, null);	
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SingleConstDecl",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ConstDeclPart ::= SingleConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclPart",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ConstDeclPart ::= ConstDeclPart COMMA SingleConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclPart",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ConstDecl ::= CONST Type ConstDeclPart SEMI 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				  if( !t.equals(Tab.intType) && !t.equals(Tab.charType) && !t.equals(parser.boolType) )
				  parser.report_info("Greska na liniji:"+ tleft, null);
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SingleVarDecl ::= IDENT LSQUARE RSQUARE 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				parser.report_info("Deklarisan niz "+ varName+" na liniji "+ varNameleft, null);
		
				Obj sym = Tab.currentScope().findSymbol(varName);
				if (sym == null)
					Tab.insert(Obj.Var, varName, new Struct(Struct.Array, currentType));
				else {
					parser.report_info("Greska na liniji, nije jedinstveno ime "+  varNameleft, null);	
				}
				
				if (currentMethod == null && currentClass == null)
					parser.globProm++;  
				else if (currentMethod != null && currentClass == null && currentMethod.getName().equals("main"))
					parser.lokProm++;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SingleVarDecl",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SingleVarDecl ::= IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				parser.report_info("Deklarisana promenljiva "+ varName+" na liniji "+ varNameleft, null);
				
				Obj sym = Tab.currentScope().findSymbol(varName);
				if (sym == null)
					Tab.insert(Obj.Var, varName, currentType); 
				else {
				parser.report_info("Greska na liniji, nije jedinstveno ime "+  varNameleft, null);	
				}
				
				if (currentMethod == null && currentClass == null)
					parser.globProm++;
				else if (currentMethod != null && currentClass == null && currentMethod.getName().equals("main"))
					parser.lokProm++;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SingleVarDecl",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VarDeclPart ::= SingleVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclPart",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VarDeclPart ::= error COMMA SingleVarDecl 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
			parser.log.debug("Uspesan oporavak od greske pri definiciji globalnih promenljivih do sledeceg , u liniji " +eleft);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclPart",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VarDeclPart ::= VarDeclPart COMMA SingleVarDecl 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclPart",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarDecl ::= Type error SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			parser.log.debug("Uspesan oporavak od greske pri definiciji globalnih promenljivih do ; u liniji " +lleft);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarDecl ::= Type VarDeclPart SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarDeclList ::= VarDeclList VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ProgDecl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgDecl",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ProgDecl ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgDecl",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ProgDecl ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgDecl",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ProgDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgDeclList",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ProgDeclList ::= ProgDeclList ProgDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgDeclList",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgName ::= IDENT 
            {
              Obj RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String pName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		  
	RESULT = Tab.insert(Obj.Prog, pName, Tab.noType);
	Tab.openScope(); 
	parser.lastArrayIndex = Tab.insert(Obj.Var, "lastArrayIndex", Tab.intType);
	parser.lastArrayStoreIndex = Tab.insert(Obj.Var, "lastArrayStoreIndex", Tab.intType);
	temp = Tab.insert(Obj.Var, "temp", Tab.intType);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgName",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROG ProgName ProgDeclList LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
	Code.dataSize = Tab.currentScope().getnVars();
	
	Tab.chainLocalSymbols(p);
	Tab.closeScope(); 

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

