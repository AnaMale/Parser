package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

parser code {:

    Logger log = Logger.getLogger(getClass());
    
   public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
		System.err.println(msg.toString());
 //       log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
:}

scan with{:

Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s; //prsretanje svakog tokena 


:}


terminal PROG, IDENT, LBRACE, RBRACE, LPAREN, RPAREN, LSQUARE, RSQUARE, SEMI, CONST, STATIC, COMMA, EXTENDS, CLASS, DOT;
terminal READ, PRINT, BREAK, CONTINUE, OR, AND, IF, FOR, RETURN, INC, DEC, VOID, ELSE, DIFERENT;
terminal PLUS, PLUSEQUAL, MINUSEQUAL, DIVEQUAL, MULEQUAL, MODEQUAL, EQUAL, MINUS;
terminal CONDITIONALEQUAL, LESSEQUAL, MOREEQUAL, LESS, MORE, DIFFERENT;
terminal NUMBER, CHARACTER, BOOL, NEW;
terminal MUL, DIV, MOD;

non terminal ProgDeclList, MethodDeclList, Program, ClassVarDeclPart, SingleClassVarDecl, ClassVarDeclList, ClassDecl, ExtType;
non terminal ClassDeclMethod, RetType, MethodDecl, FormArgs, FormPars, FormalParamDecl, VarArgs,  VarDeclList, VarDecl, StatementList, Statement;
non terminal VarDeclPart, SingleVarDecl, DesignatorStatement, Condition, Matched, Unmatched, ForPart, Expr, Designator, OptCondition;
non terminal ActualPars, ConstDeclPart, SingleConstDecl, ClassVarDecl, ActualParamList, CondTerm, CondFact, ConstDecl;
non terminal Relop, AssignOp, Term, OptStatic, OptDesignatorStatement, Type, ExprFactorType, Addop, Mulop, Factor, MulopLeft, MulopRight, AddopLeft, AddopRight;
non terminal Integer ConstValue;

Program ::= PROG IDENT ProgDeclList LBRACE MethodDeclList RBRACE;

ConstDecl ::= CONST Type ConstDeclPart SEMI;

ConstDeclPart ::= ConstDeclPart COMMA SingleConstDecl
					|
					SingleConstDecl
					;

SingleConstDecl ::= IDENT EQUAL ConstValue;

ConstValue ::= NUMBER 
			   |
			   CHARACTER
			   |
			   BOOL
			   ;
			   
ClassVarDeclList ::= ClassVarDeclList ClassVarDecl
					 |
					 /*epsilon*/
					 ;
			   
ClassVarDecl ::= OptStatic Type ClassVarDeclPart SEMI;

ClassVarDeclPart ::= ClassVarDeclPart SingleClassVarDecl
					 |
					 SingleClassVarDecl
					 ;
SingleClassVarDecl ::= IDENT 
                       |
					   IDENT LSQUARE RSQUARE
					   ;
					 
					 
OptStatic ::= STATIC 
			  |
			  ;
			  
ExtType ::= EXTENDS Type
			|
			/*epsilon*/
			;
			  
ClassDecl	::= CLASS IDENT ExtType LBRACE ClassVarDeclList ClassDeclMethod RBRACE;

ClassDeclMethod ::= LBRACE MethodDeclList RBRACE
					|
					;


MethodDeclList ::= MethodDeclList MethodDecl
				   |
				   /*epsilon*/
				   ;
				   
RetType ::= Type 
			|
			VOID
			;
				   
MethodDecl ::= OptStatic RetType IDENT LPAREN FormArgs RPAREN VarDeclList LBRACE StatementList RBRACE;

VarDeclList ::= VarDeclList VarDecl 
                |
				;
				
VarDecl ::= Type VarDeclPart SEMI;

VarDeclPart ::= VarDeclPart COMMA SingleVarDecl 
				|
				SingleVarDecl
				;
				
SingleVarDecl ::= IDENT 
				  |
				  IDENT LSQUARE RSQUARE
				  ;


FormArgs ::= FormPars COMMA VarArgs
			 |
			 FormPars
			 |
			 VarArgs
			 |
			 /*epsilon*/
			 ;
	

VarArgs ::= Type DOT DOT DOT IDENT;	
			 
			 

FormPars ::= FormPars COMMA FormalParamDecl
					|
					FormalParamDecl
					;				   
					
StatementList ::= StatementList Statement
				  |
				  ;
				  
Statement ::= Matched | Unmatched; 

OptDesignatorStatement ::= DesignatorStatement | ;

ForPart ::= FOR LPAREN OptDesignatorStatement SEMI OptCondition SEMI OptDesignatorStatement RPAREN ; 

OptCondition ::= Condition | ;

Unmatched ::= IF LPAREN Condition RPAREN Statement
				|
				IF LPAREN Condition RPAREN Matched ELSE Unmatched
				|
				ForPart
				Unmatched
				;

Matched ::= DesignatorStatement SEMI
			|
			IF LPAREN Condition RPAREN Matched ELSE Matched
			|
			ForPart Matched
			|
			BREAK SEMI 
			|
			CONTINUE SEMI
			| 
			RETURN Expr SEMI
			|
            RETURN SEMI
			|
			READ LPAREN Designator RPAREN SEMI 
			| 
			PRINT LPAREN Expr RBRACE SEMI 
			|
			LBRACE StatementList RBRACE 
			; 
			
DesignatorStatement ::= Designator AssignOp Expr
						|
						Designator LPAREN ActualPars RPAREN
						|
						Designator INC 
						|
						Designator DEC
						;
						
ActualPars ::= ActualParamList 
			   |
			   /*epsilon*/
			   ;
			   
ActualParamList ::= ActualParamList COMMA Expr
					|
					Expr
					;
					
					
Condition ::= Condition OR CondTerm
			  |
			  CondTerm
			  ;
			  
CondTerm ::= CondTerm AND CondFact
			 |
			 CondFact
			 ;
			 
CondFact ::= Expr Relop Expr
			|
			Expr
			;
			
Expr ::= ExprFactorType; 

ExprFactorType ::= ExprFactorType Addop Term 
				   |
				   Term 
				   |
				   MINUS Term
				   ;

Term ::= Term Mulop Factor
		 |
		 Factor
		 ;
			
Factor ::= Designator 
		   |
		   Designator LPAREN ActualPars RPAREN
		   |
		   NUMBER
		   |
		   CHARACTER
		   |
		   BOOL
		   |
		   NEW Type
		   |
		   NEW Type LSQUARE Expr RSQUARE
		   |
		   LPAREN Expr RPAREN
		   ;
		   
Designator ::= IDENT 
			   |
			   IDENT DOT IDENT
			   |
			   IDENT LSQUARE Expr RSQUARE
			   ;
			   
AssignOp ::= EQUAL
			 |
			 AddopRight
			 |
			 MulopRight
			 ;
			
Relop ::= CONDITIONALEQUAL
		  |
		  DIFFERENT 
		  |
		  LESS
		  |
		  MOREEQUAL
		  |
		  MORE
		  |
		  LESSEQUAL
		  |
		  DIFERENT
		  ;
		  
Addop ::= AddopLeft | AddopRight;

AddopLeft ::= PLUS
			  |
			  MINUS
			  ;
			  
AddopRight ::= PLUSEQUAL 
			   |
			   MINUSEQUAL ;	

Mulop ::= MulopLeft 
		  |
		  MulopRight
		  ;
		  
MulopLeft ::= MUL
			  |
			  DIV
			  |
			  MOD
			  ;
			  
MulopRight ::= MULEQUAL
			   |
			   DIVEQUAL
			   |
			   MODEQUAL
			   ;
			   
			   
			  
		   