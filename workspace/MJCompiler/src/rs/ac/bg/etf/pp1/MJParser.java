
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 13 23:33:31 CEST 2017
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java.util.ArrayList;
import java.util.HashMap;
import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.symboltable.structure.HashTableDataStructure;
import rs.etf.pp1.mj.runtime.Code;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 13 23:33:31 CEST 2017
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\231\000\002\003\010\000\002\002\004\000\002\042" +
    "\003\000\002\031\004\000\002\031\002\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\004\004\000" +
    "\002\004\002\000\002\006\005\000\002\006\005\000\002" +
    "\036\005\000\002\036\005\000\002\036\003\000\002\035" +
    "\003\000\002\035\005\000\002\033\006\000\002\034\005" +
    "\000\002\034\003\000\002\051\005\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\045\003\000\002" +
    "\045\003\000\002\023\004\000\002\023\003\000\002\023" +
    "\002\000\002\024\004\000\002\024\002\000\002\072\002" +
    "\000\002\025\007\000\002\026\005\000\002\026\003\000" +
    "\002\027\003\000\002\027\005\000\002\044\003\000\002" +
    "\030\011\000\002\037\005\000\002\037\004\000\002\037" +
    "\002\000\002\046\003\000\002\046\003\000\002\005\004" +
    "\000\002\005\002\000\002\071\003\000\002\071\002\000" +
    "\002\073\002\000\002\074\002\000\002\075\002\000\002" +
    "\007\017\000\002\040\005\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\002\000\002\010\007" +
    "\000\002\014\005\000\002\014\005\000\002\014\003\000" +
    "\002\013\004\000\002\013\006\000\002\017\004\000\002" +
    "\017\002\000\002\020\003\000\002\020\003\000\002\076" +
    "\002\000\002\032\006\000\002\032\004\000\002\032\004" +
    "\000\002\032\006\000\002\011\012\000\002\022\007\000" +
    "\002\022\011\000\002\022\004\000\002\060\003\000\002" +
    "\060\002\000\002\060\003\000\002\057\003\000\002\057" +
    "\003\000\002\021\004\000\002\021\011\000\002\021\004" +
    "\000\002\021\004\000\002\021\004\000\002\021\005\000" +
    "\002\021\004\000\002\021\007\000\002\021\007\000\002" +
    "\021\005\000\002\021\006\000\002\054\005\000\002\054" +
    "\003\000\002\055\005\000\002\055\003\000\002\056\005" +
    "\000\002\056\003\000\002\047\003\000\002\077\002\000" +
    "\002\052\006\000\002\052\003\000\002\100\002\000\002" +
    "\052\005\000\002\052\005\000\002\052\005\000\002\101" +
    "\002\000\002\053\006\000\002\053\003\000\002\102\002" +
    "\000\002\053\006\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\006\000\002" +
    "\050\007\000\002\050\004\000\002\050\005\000\002\015" +
    "\003\000\002\015\002\000\002\016\005\000\002\016\003" +
    "\000\002\043\003\000\002\103\002\000\002\043\007\000" +
    "\002\043\005\000\002\063\003\000\002\063\003\000\002" +
    "\063\003\000\002\063\003\000\002\063\003\000\002\063" +
    "\003\000\002\062\003\000\002\062\003\000\002\065\003" +
    "\000\002\065\003\000\002\065\003\000\002\066\003\000" +
    "\002\066\003\000\002\066\003\000\002\061\003\000\002" +
    "\061\003\000\002\067\003\000\002\067\003\000\002\070" +
    "\003\000\002\070\003\000\002\064\003\000\002\064\003" +
    "\000\002\064\003\000\002\064\003\000\002\064\003\000" +
    "\002\064\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\371\000\004\004\005\001\002\000\004\002\373\001" +
    "\002\000\004\056\006\001\002\000\014\005\uffff\025\uffff" +
    "\056\uffff\070\uffff\071\uffff\001\002\000\014\005\ufffd\025" +
    "\ufffd\056\ufffd\070\ufffd\071\ufffd\001\002\000\014\005\012" +
    "\025\022\056\013\070\021\071\014\001\002\000\006\003" +
    "\360\056\361\001\002\000\014\006\uffd4\020\uffd4\026\uffd4" +
    "\056\uffd4\071\uffd4\001\002\000\076\003\uffe9\005\uffe9\007" +
    "\uffe9\011\uffe9\012\uffe9\022\uffe9\023\uffe9\027\uffe9\030\uffe9" +
    "\031\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040" +
    "\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9" +
    "\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\056\uffe9\061" +
    "\uffe9\062\uffe9\001\002\000\076\003\uffe8\005\uffe8\007\uffe8" +
    "\011\uffe8\012\uffe8\022\uffe8\023\uffe8\027\uffe8\030\uffe8\031" +
    "\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8" +
    "\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047" +
    "\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\056\uffe8\061\uffe8" +
    "\062\uffe8\001\002\000\014\005\ufffb\025\ufffb\056\ufffb\070" +
    "\ufffb\071\ufffb\001\002\000\014\005\ufffa\025\ufffa\056\ufffa" +
    "\070\ufffa\071\ufffa\001\002\000\014\005\ufffe\025\ufffe\056" +
    "\ufffe\070\ufffe\071\ufffe\001\002\000\014\005\ufffc\025\ufffc" +
    "\056\ufffc\070\ufffc\071\ufffc\001\002\000\004\056\040\001" +
    "\002\000\006\056\013\071\014\001\002\000\004\056\025" +
    "\001\002\000\006\007\uffee\012\uffee\001\002\000\004\017" +
    "\032\001\002\000\006\007\030\012\027\001\002\000\004" +
    "\056\025\001\002\000\014\005\ufff0\025\ufff0\056\ufff0\070" +
    "\ufff0\071\ufff0\001\002\000\006\007\uffef\012\uffef\001\002" +
    "\000\010\054\034\055\033\060\035\001\002\000\006\007" +
    "\uffeb\012\uffeb\001\002\000\006\007\uffec\012\uffec\001\002" +
    "\000\006\007\uffea\012\uffea\001\002\000\006\007\uffed\012" +
    "\uffed\001\002\000\010\003\042\005\uffe5\057\041\001\002" +
    "\000\010\003\uffdc\005\uffdc\057\uffdc\001\002\000\006\056" +
    "\013\071\014\001\002\000\004\005\uffe6\001\002\000\004" +
    "\005\044\001\002\000\016\003\uffe3\005\uffe3\006\uffe3\026" +
    "\uffe3\056\uffe3\071\uffe3\001\002\000\016\003\047\005\046" +
    "\006\uffd8\026\051\056\uffd2\071\uffd2\001\002\000\014\006" +
    "\uffd4\020\uffd4\026\uffd4\056\uffd4\071\uffd4\001\002\000\004" +
    "\005\067\001\002\000\006\056\uffe2\071\uffe2\001\002\000" +
    "\010\020\uffd3\056\uffd3\071\uffd3\001\002\000\016\003\uffe4" +
    "\005\uffe4\006\uffe4\026\uffe4\056\uffe4\071\uffe4\001\002\000" +
    "\004\006\054\001\002\000\014\005\uffdb\025\uffdb\056\uffdb" +
    "\070\uffdb\071\uffdb\001\002\000\006\056\013\071\014\001" +
    "\002\000\004\056\060\001\002\000\006\007\uffdf\012\uffdf" +
    "\001\002\000\010\007\uffde\012\uffde\022\065\001\002\000" +
    "\006\007\063\012\062\001\002\000\004\056\060\001\002" +
    "\000\016\003\uffe1\005\uffe1\006\uffe1\026\uffe1\056\uffe1\071" +
    "\uffe1\001\002\000\006\007\uffe0\012\uffe0\001\002\000\004" +
    "\023\066\001\002\000\006\007\uffdd\012\uffdd\001\002\000" +
    "\004\006\uffd9\001\002\000\014\006\072\020\uffd2\026\051" +
    "\056\uffd2\071\uffd2\001\002\000\010\020\076\056\013\071" +
    "\014\001\002\000\004\006\uffda\001\002\000\014\006\uffd5" +
    "\020\uffd5\026\uffd5\056\uffd5\071\uffd5\001\002\000\004\056" +
    "\uffd7\001\002\000\004\056\077\001\002\000\004\056\uffd6" +
    "\001\002\000\004\010\uffd1\001\002\000\004\010\101\001" +
    "\002\000\012\003\103\011\uffc9\056\013\071\014\001\002" +
    "\000\006\027\350\056\345\001\002\000\006\011\uffca\012" +
    "\342\001\002\000\004\011\uffd0\001\002\000\006\011\uffcc" +
    "\012\110\001\002\000\004\011\uffcb\001\002\000\006\011" +
    "\uffc5\012\uffc5\001\002\000\006\056\013\071\014\001\002" +
    "\000\004\011\uffcd\001\002\000\006\011\uffc7\012\uffc7\001" +
    "\002\000\004\011\114\001\002\000\010\005\ufff8\056\ufff8" +
    "\071\ufff8\001\002\000\010\005\116\056\013\071\014\001" +
    "\002\000\026\005\uffcf\006\uffcf\013\uffcf\014\uffcf\021\uffcf" +
    "\056\uffcf\063\uffcf\065\uffcf\066\uffcf\067\uffcf\001\002\000" +
    "\010\005\ufff9\056\ufff9\071\ufff9\001\002\000\026\005\uffc1" +
    "\006\uffc1\013\uffc1\014\uffc1\021\uffc1\056\uffc1\063\uffc1\065" +
    "\uffc1\066\uffc1\067\uffc1\001\002\000\026\005\123\006\140" +
    "\013\134\014\137\021\122\056\124\063\130\065\125\066" +
    "\141\067\136\001\002\000\004\010\336\001\002\000\026" +
    "\005\uffc1\006\uffc1\013\uffc1\014\uffc1\021\uffc1\056\uffc1\063" +
    "\uffc1\065\uffc1\066\uffc1\067\uffc1\001\002\000\100\007\uff86" +
    "\010\uff86\011\uff86\012\uff86\015\uff86\016\uff86\017\uff86\022" +
    "\uff86\023\uff86\027\uff86\030\uff86\031\uff86\033\uff86\034\uff86" +
    "\035\uff86\036\uff86\037\uff86\040\uff86\041\uff86\042\uff86\043" +
    "\uff86\044\uff86\045\uff86\046\uff86\047\uff86\050\uff86\051\uff86" +
    "\052\uff86\053\uff86\061\uff86\062\uff86\001\002\000\004\010" +
    "\317\001\002\000\026\005\uffbf\006\uffbf\013\uffbf\014\uffbf" +
    "\021\uffbf\056\uffbf\063\uffbf\065\uffbf\066\uffbf\067\uffbf\001" +
    "\002\000\030\010\307\015\304\016\305\017\302\022\214" +
    "\027\216\041\306\042\300\043\310\044\277\045\301\001" +
    "\002\000\004\010\250\001\002\000\004\007\247\001\002" +
    "\000\026\005\uffc2\006\uffc2\013\uffc2\014\uffc2\021\uffc2\056" +
    "\uffc2\063\uffc2\065\uffc2\066\uffc2\067\uffc2\001\002\000\024" +
    "\005\123\013\134\014\137\021\122\056\124\063\130\065" +
    "\125\066\141\067\136\001\002\000\004\010\241\001\002" +
    "\000\026\005\uffc0\006\uffc0\013\uffc0\014\uffc0\021\uffc0\056" +
    "\uffc0\063\uffc0\065\uffc0\066\uffc0\067\uffc0\001\002\000\004" +
    "\007\240\001\002\000\022\007\153\010\156\024\147\037" +
    "\143\054\152\055\144\056\124\060\146\001\002\000\014" +
    "\006\uffce\020\uffce\026\uffce\056\uffce\071\uffce\001\002\000" +
    "\004\007\142\001\002\000\030\005\uffad\006\uffad\013\uffad" +
    "\014\uffad\021\uffad\056\uffad\063\uffad\064\uffad\065\uffad\066" +
    "\uffad\067\uffad\001\002\000\016\010\uff9b\024\uff9b\054\uff9b" +
    "\055\uff9b\056\uff9b\060\uff9b\001\002\000\064\007\uff91\011" +
    "\uff91\012\uff91\023\uff91\030\uff91\031\uff91\033\uff91\034\uff91" +
    "\035\uff91\036\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043" +
    "\uff91\044\uff91\045\uff91\046\uff91\047\uff91\050\uff91\051\uff91" +
    "\052\uff91\053\uff91\061\uff91\062\uff91\001\002\000\004\007" +
    "\235\001\002\000\064\007\uff90\011\uff90\012\uff90\023\uff90" +
    "\030\uff90\031\uff90\033\uff90\034\uff90\035\uff90\036\uff90\037" +
    "\uff90\040\uff90\041\uff90\042\uff90\043\uff90\044\uff90\045\uff90" +
    "\046\uff90\047\uff90\050\uff90\051\uff90\052\uff90\053\uff90\061" +
    "\uff90\062\uff90\001\002\000\006\056\013\071\014\001\002" +
    "\000\072\007\uff8f\010\215\011\uff8f\012\uff8f\022\214\023" +
    "\uff8f\027\216\030\uff8f\031\uff8f\033\uff8f\034\uff8f\035\uff8f" +
    "\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\044" +
    "\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f" +
    "\053\uff8f\061\uff8f\062\uff8f\001\002\000\046\007\uff9f\011" +
    "\uff9f\012\uff9f\023\uff9f\030\200\031\206\036\204\037\177" +
    "\041\207\042\202\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052" +
    "\uff9f\053\uff9f\061\uff9f\062\uff9f\001\002\000\064\007\uff92" +
    "\011\uff92\012\uff92\023\uff92\030\uff92\031\uff92\033\uff92\034" +
    "\uff92\035\uff92\036\uff92\037\uff92\040\uff92\041\uff92\042\uff92" +
    "\043\uff92\044\uff92\045\uff92\046\uff92\047\uff92\050\uff92\051" +
    "\uff92\052\uff92\053\uff92\061\uff92\062\uff92\001\002\000\030" +
    "\005\uffaa\006\uffaa\013\uffaa\014\uffaa\021\uffaa\056\uffaa\063" +
    "\uffaa\064\uffaa\065\uffaa\066\uffaa\067\uffaa\001\002\000\064" +
    "\007\uff9c\011\uff9c\012\uff9c\023\uff9c\030\uff9c\031\uff9c\033" +
    "\172\034\170\035\165\036\uff9c\037\uff9c\040\163\041\uff9c" +
    "\042\uff9c\043\171\044\162\045\164\046\uff9c\047\uff9c\050" +
    "\uff9c\051\uff9c\052\uff9c\053\uff9c\061\uff9c\062\uff9c\001\002" +
    "\000\064\007\uff95\011\uff95\012\uff95\023\uff95\030\uff95\031" +
    "\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95\040\uff95" +
    "\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95\047" +
    "\uff95\050\uff95\051\uff95\052\uff95\053\uff95\061\uff95\062\uff95" +
    "\001\002\000\020\010\156\024\147\037\143\054\152\055" +
    "\144\056\124\060\146\001\002\000\004\011\160\001\002" +
    "\000\064\007\uff8b\011\uff8b\012\uff8b\023\uff8b\030\uff8b\031" +
    "\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b" +
    "\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b\047" +
    "\uff8b\050\uff8b\051\uff8b\052\uff8b\053\uff8b\061\uff8b\062\uff8b" +
    "\001\002\000\016\010\uff7b\024\uff7b\054\uff7b\055\uff7b\056" +
    "\uff7b\060\uff7b\001\002\000\016\010\uff76\024\uff76\054\uff76" +
    "\055\uff76\056\uff76\060\uff76\001\002\000\016\010\uff78\024" +
    "\uff78\054\uff78\055\uff78\056\uff78\060\uff78\001\002\000\016" +
    "\010\uff75\024\uff75\054\uff75\055\uff75\056\uff75\060\uff75\001" +
    "\002\000\016\010\uff79\024\uff79\054\uff79\055\uff79\056\uff79" +
    "\060\uff79\001\002\000\016\010\uff97\024\uff97\054\uff97\055" +
    "\uff97\056\uff97\060\uff97\001\002\000\016\010\uff7c\024\uff7c" +
    "\054\uff7c\055\uff7c\056\uff7c\060\uff7c\001\002\000\016\010" +
    "\uff7a\024\uff7a\054\uff7a\055\uff7a\056\uff7a\060\uff7a\001\002" +
    "\000\016\010\uff77\024\uff77\054\uff77\055\uff77\056\uff77\060" +
    "\uff77\001\002\000\016\010\uff94\024\uff94\054\uff94\055\uff94" +
    "\056\uff94\060\uff94\001\002\000\016\010\156\024\147\054" +
    "\152\055\144\056\124\060\146\001\002\000\064\007\uff93" +
    "\011\uff93\012\uff93\023\uff93\030\uff93\031\uff93\033\uff93\034" +
    "\uff93\035\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93" +
    "\043\uff93\044\uff93\045\uff93\046\uff93\047\uff93\050\uff93\051" +
    "\uff93\052\uff93\053\uff93\061\uff93\062\uff93\001\002\000\016" +
    "\010\156\024\147\054\152\055\144\056\124\060\146\001" +
    "\002\000\064\007\uff96\011\uff96\012\uff96\023\uff96\030\uff96" +
    "\031\uff96\033\uff96\034\uff96\035\uff96\036\uff96\037\uff96\040" +
    "\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96" +
    "\047\uff96\050\uff96\051\uff96\052\uff96\053\uff96\061\uff96\062" +
    "\uff96\001\002\000\016\010\uff71\024\uff71\054\uff71\055\uff71" +
    "\056\uff71\060\uff71\001\002\000\016\010\156\024\147\054" +
    "\152\055\144\056\124\060\146\001\002\000\016\010\uff73" +
    "\024\uff73\054\uff73\055\uff73\056\uff73\060\uff73\001\002\000" +
    "\016\010\uff6f\024\uff6f\054\uff6f\055\uff6f\056\uff6f\060\uff6f" +
    "\001\002\000\016\010\uff74\024\uff74\054\uff74\055\uff74\056" +
    "\uff74\060\uff74\001\002\000\016\010\uff72\024\uff72\054\uff72" +
    "\055\uff72\056\uff72\060\uff72\001\002\000\016\010\uff9e\024" +
    "\uff9e\054\uff9e\055\uff9e\056\uff9e\060\uff9e\001\002\000\016" +
    "\010\156\024\147\054\152\055\144\056\124\060\146\001" +
    "\002\000\016\010\uff70\024\uff70\054\uff70\055\uff70\056\uff70" +
    "\060\uff70\001\002\000\064\007\uff99\011\uff99\012\uff99\023" +
    "\uff99\030\uff99\031\uff99\033\172\034\170\035\165\036\uff99" +
    "\037\uff99\040\163\041\uff99\042\uff99\043\171\044\162\045" +
    "\164\046\uff99\047\uff99\050\uff99\051\uff99\052\uff99\053\uff99" +
    "\061\uff99\062\uff99\001\002\000\016\010\156\024\147\054" +
    "\152\055\144\056\124\060\146\001\002\000\064\007\uff9d" +
    "\011\uff9d\012\uff9d\023\uff9d\030\uff9d\031\uff9d\033\172\034" +
    "\170\035\165\036\uff9d\037\uff9d\040\163\041\uff9d\042\uff9d" +
    "\043\171\044\162\045\164\046\uff9d\047\uff9d\050\uff9d\051" +
    "\uff9d\052\uff9d\053\uff9d\061\uff9d\062\uff9d\001\002\000\064" +
    "\007\uff98\011\uff98\012\uff98\023\uff98\030\uff98\031\uff98\033" +
    "\172\034\170\035\165\036\uff98\037\uff98\040\163\041\uff98" +
    "\042\uff98\043\171\044\162\045\164\046\uff98\047\uff98\050" +
    "\uff98\051\uff98\052\uff98\053\uff98\061\uff98\062\uff98\001\002" +
    "\000\020\010\uff85\024\uff85\037\uff85\054\uff85\055\uff85\056" +
    "\uff85\060\uff85\001\002\000\022\010\156\011\uff89\024\147" +
    "\037\143\054\152\055\144\056\124\060\146\001\002\000" +
    "\004\056\217\001\002\000\100\007\uff83\010\uff83\011\uff83" +
    "\012\uff83\015\uff83\016\uff83\017\uff83\022\uff83\023\uff83\027" +
    "\uff83\030\uff83\031\uff83\033\uff83\034\uff83\035\uff83\036\uff83" +
    "\037\uff83\040\uff83\041\uff83\042\uff83\043\uff83\044\uff83\045" +
    "\uff83\046\uff83\047\uff83\050\uff83\051\uff83\052\uff83\053\uff83" +
    "\061\uff83\062\uff83\001\002\000\004\011\225\001\002\000" +
    "\006\011\uff87\012\uff87\001\002\000\006\011\uff8a\012\223" +
    "\001\002\000\020\010\156\024\147\037\143\054\152\055" +
    "\144\056\124\060\146\001\002\000\006\011\uff88\012\uff88" +
    "\001\002\000\064\007\uff8e\011\uff8e\012\uff8e\023\uff8e\030" +
    "\uff8e\031\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e\037\uff8e" +
    "\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e\046" +
    "\uff8e\047\uff8e\050\uff8e\051\uff8e\052\uff8e\053\uff8e\061\uff8e" +
    "\062\uff8e\001\002\000\020\010\156\024\147\037\143\054" +
    "\152\055\144\056\124\060\146\001\002\000\004\023\230" +
    "\001\002\000\100\007\uff84\010\uff84\011\uff84\012\uff84\015" +
    "\uff84\016\uff84\017\uff84\022\uff84\023\uff84\027\uff84\030\uff84" +
    "\031\uff84\033\uff84\034\uff84\035\uff84\036\uff84\037\uff84\040" +
    "\uff84\041\uff84\042\uff84\043\uff84\044\uff84\045\uff84\046\uff84" +
    "\047\uff84\050\uff84\051\uff84\052\uff84\053\uff84\061\uff84\062" +
    "\uff84\001\002\000\066\007\uff8c\011\uff8c\012\uff8c\022\232" +
    "\023\uff8c\030\uff8c\031\uff8c\033\uff8c\034\uff8c\035\uff8c\036" +
    "\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c" +
    "\045\uff8c\046\uff8c\047\uff8c\050\uff8c\051\uff8c\052\uff8c\053" +
    "\uff8c\061\uff8c\062\uff8c\001\002\000\020\010\156\024\147" +
    "\037\143\054\152\055\144\056\124\060\146\001\002\000" +
    "\004\023\234\001\002\000\064\007\uff8d\011\uff8d\012\uff8d" +
    "\023\uff8d\030\uff8d\031\uff8d\033\uff8d\034\uff8d\035\uff8d\036" +
    "\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d\044\uff8d" +
    "\045\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d\052\uff8d\053" +
    "\uff8d\061\uff8d\062\uff8d\001\002\000\030\005\uffab\006\uffab" +
    "\013\uffab\014\uffab\021\uffab\056\uffab\063\uffab\064\uffab\065" +
    "\uffab\066\uffab\067\uffab\001\002\000\016\010\156\024\147" +
    "\054\152\055\144\056\124\060\146\001\002\000\064\007" +
    "\uff9a\011\uff9a\012\uff9a\023\uff9a\030\uff9a\031\uff9a\033\172" +
    "\034\170\035\165\036\uff9a\037\uff9a\040\163\041\uff9a\042" +
    "\uff9a\043\171\044\162\045\164\046\uff9a\047\uff9a\050\uff9a" +
    "\051\uff9a\052\uff9a\053\uff9a\061\uff9a\062\uff9a\001\002\000" +
    "\030\005\uffac\006\uffac\013\uffac\014\uffac\021\uffac\056\uffac" +
    "\063\uffac\064\uffac\065\uffac\066\uffac\067\uffac\001\002\000" +
    "\020\010\156\024\147\037\143\054\152\055\144\056\124" +
    "\060\146\001\002\000\004\011\243\001\002\000\004\007" +
    "\244\001\002\000\030\005\uffa8\006\uffa8\013\uffa8\014\uffa8" +
    "\021\uffa8\056\uffa8\063\uffa8\064\uffa8\065\uffa8\066\uffa8\067" +
    "\uffa8\001\002\000\026\005\uffb6\006\uffb6\013\uffb6\014\uffb6" +
    "\021\uffb6\056\uffb6\063\uffb6\065\uffb6\066\uffb6\067\uffb6\001" +
    "\002\000\030\005\uffae\006\uffae\013\uffae\014\uffae\021\uffae" +
    "\056\uffae\063\uffae\064\uffae\065\uffae\066\uffae\067\uffae\001" +
    "\002\000\030\005\uffb0\006\uffb0\013\uffb0\014\uffb0\021\uffb0" +
    "\056\uffb0\063\uffb0\064\uffb0\065\uffb0\066\uffb0\067\uffb0\001" +
    "\002\000\020\010\156\024\147\037\143\054\152\055\144" +
    "\056\124\060\146\001\002\000\026\007\uffa0\011\uffa0\046" +
    "\270\047\273\050\274\051\275\052\271\053\267\061\uffa0" +
    "\062\uffa0\001\002\000\006\011\257\061\260\001\002\000" +
    "\012\007\uffa2\011\uffa2\061\uffa2\062\uffa2\001\002\000\012" +
    "\007\uffa4\011\uffa4\061\uffa4\062\255\001\002\000\020\010" +
    "\156\024\147\037\143\054\152\055\144\056\124\060\146" +
    "\001\002\000\012\007\uffa3\011\uffa3\061\uffa3\062\uffa3\001" +
    "\002\000\024\005\123\013\134\014\137\021\122\056\124" +
    "\063\130\065\125\066\141\067\136\001\002\000\020\010" +
    "\156\024\147\037\143\054\152\055\144\056\124\060\146" +
    "\001\002\000\012\007\uffa5\011\uffa5\061\uffa5\062\255\001" +
    "\002\000\026\005\uffb8\006\uffb8\013\uffb8\014\uffb8\021\uffb8" +
    "\056\uffb8\063\uffb8\065\uffb8\066\uffb8\067\uffb8\001\002\000" +
    "\030\005\uffc0\006\uffc0\013\uffc0\014\uffc0\021\uffc0\056\uffc0" +
    "\063\uffc0\064\264\065\uffc0\066\uffc0\067\uffc0\001\002\000" +
    "\024\005\123\013\134\014\137\021\122\056\124\063\130" +
    "\065\125\066\141\067\136\001\002\000\026\005\uffb7\006" +
    "\uffb7\013\uffb7\014\uffb7\021\uffb7\056\uffb7\063\uffb7\065\uffb7" +
    "\066\uffb7\067\uffb7\001\002\000\030\005\uffaf\006\uffaf\013" +
    "\uffaf\014\uffaf\021\uffaf\056\uffaf\063\uffaf\064\uffaf\065\uffaf" +
    "\066\uffaf\067\uffaf\001\002\000\020\010\uff7d\024\uff7d\037" +
    "\uff7d\054\uff7d\055\uff7d\056\uff7d\060\uff7d\001\002\000\020" +
    "\010\uff82\024\uff82\037\uff82\054\uff82\055\uff82\056\uff82\060" +
    "\uff82\001\002\000\020\010\uff7e\024\uff7e\037\uff7e\054\uff7e" +
    "\055\uff7e\056\uff7e\060\uff7e\001\002\000\020\010\156\024" +
    "\147\037\143\054\152\055\144\056\124\060\146\001\002" +
    "\000\020\010\uff81\024\uff81\037\uff81\054\uff81\055\uff81\056" +
    "\uff81\060\uff81\001\002\000\020\010\uff80\024\uff80\037\uff80" +
    "\054\uff80\055\uff80\056\uff80\060\uff80\001\002\000\020\010" +
    "\uff7f\024\uff7f\037\uff7f\054\uff7f\055\uff7f\056\uff7f\060\uff7f" +
    "\001\002\000\012\007\uffa1\011\uffa1\061\uffa1\062\uffa1\001" +
    "\002\000\020\010\uff6a\024\uff6a\037\uff6a\054\uff6a\055\uff6a" +
    "\056\uff6a\060\uff6a\001\002\000\020\010\uff6c\024\uff6c\037" +
    "\uff6c\054\uff6c\055\uff6c\056\uff6c\060\uff6c\001\002\000\020" +
    "\010\uff69\024\uff69\037\uff69\054\uff69\055\uff69\056\uff69\060" +
    "\uff69\001\002\000\022\003\315\010\uff6e\024\uff6e\037\uff6e" +
    "\054\uff6e\055\uff6e\056\uff6e\060\uff6e\001\002\000\020\010" +
    "\uffbe\024\uffbe\037\uffbe\054\uffbe\055\uffbe\056\uffbe\060\uffbe" +
    "\001\002\000\006\007\uffbc\011\uffbc\001\002\000\006\007" +
    "\uffbb\011\uffbb\001\002\000\020\010\uff6d\024\uff6d\037\uff6d" +
    "\054\uff6d\055\uff6d\056\uff6d\060\uff6d\001\002\000\022\010" +
    "\156\011\uff89\024\147\037\143\054\152\055\144\056\124" +
    "\060\146\001\002\000\020\010\uff6b\024\uff6b\037\uff6b\054" +
    "\uff6b\055\uff6b\056\uff6b\060\uff6b\001\002\000\004\011\312" +
    "\001\002\000\006\007\uffba\011\uffba\001\002\000\020\010" +
    "\156\024\147\037\143\054\152\055\144\056\124\060\146" +
    "\001\002\000\006\007\uffbd\011\uffbd\001\002\000\004\007" +
    "\316\001\002\000\030\005\uffa6\006\uffa6\013\uffa6\014\uffa6" +
    "\021\uffa6\056\uffa6\063\uffa6\064\uffa6\065\uffa6\066\uffa6\067" +
    "\uffa6\001\002\000\010\003\321\007\uffb4\056\124\001\002" +
    "\000\004\007\325\001\002\000\006\007\uffb3\011\uffb3\001" +
    "\002\000\030\010\307\015\304\016\305\017\324\022\214" +
    "\027\216\041\306\042\300\043\310\044\277\045\301\001" +
    "\002\000\006\007\uffb5\011\uffb5\001\002\000\020\010\uff6e" +
    "\024\uff6e\037\uff6e\054\uff6e\055\uff6e\056\uff6e\060\uff6e\001" +
    "\002\000\022\003\330\010\156\024\147\037\143\054\152" +
    "\055\144\056\124\060\146\001\002\000\006\007\uffb2\061" +
    "\260\001\002\000\004\007\331\001\002\000\004\007\uffb1" +
    "\001\002\000\010\003\321\011\uffb4\056\124\001\002\000" +
    "\004\011\333\001\002\000\024\005\uffb9\013\uffb9\014\uffb9" +
    "\021\uffb9\056\uffb9\063\uffb9\065\uffb9\066\uffb9\067\uffb9\001" +
    "\002\000\026\005\123\006\335\013\134\014\137\021\122" +
    "\056\124\063\130\065\125\066\141\067\136\001\002\000" +
    "\030\005\uffa7\006\uffa7\013\uffa7\014\uffa7\021\uffa7\056\uffa7" +
    "\063\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7\001\002\000" +
    "\004\056\124\001\002\000\010\011\340\022\214\027\216" +
    "\001\002\000\004\007\341\001\002\000\030\005\uffa9\006" +
    "\uffa9\013\uffa9\014\uffa9\021\uffa9\056\uffa9\063\uffa9\064\uffa9" +
    "\065\uffa9\066\uffa9\067\uffa9\001\002\000\006\056\013\071" +
    "\014\001\002\000\004\056\345\001\002\000\006\011\uffc6" +
    "\012\uffc6\001\002\000\010\011\uffc4\012\uffc4\022\346\001" +
    "\002\000\004\023\347\001\002\000\006\011\uffc3\012\uffc3" +
    "\001\002\000\004\027\351\001\002\000\004\027\352\001" +
    "\002\000\004\056\353\001\002\000\004\011\uffc8\001\002" +
    "\000\004\005\uffe7\001\002\000\014\006\356\020\uffd2\026" +
    "\051\056\uffd2\071\uffd2\001\002\000\004\002\001\001\002" +
    "\000\006\007\ufff3\012\ufff3\001\002\000\006\007\371\012" +
    "\370\001\002\000\010\007\ufff2\012\ufff2\022\366\001\002" +
    "\000\006\007\364\012\363\001\002\000\004\056\361\001" +
    "\002\000\014\005\ufff7\025\ufff7\056\ufff7\070\ufff7\071\ufff7" +
    "\001\002\000\006\007\ufff5\012\ufff5\001\002\000\004\023" +
    "\367\001\002\000\006\007\ufff1\012\ufff1\001\002\000\004" +
    "\056\361\001\002\000\014\005\ufff6\025\ufff6\056\ufff6\070" +
    "\ufff6\071\ufff6\001\002\000\006\007\ufff4\012\ufff4\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\371\000\004\003\003\001\001\000\002\001\001\000" +
    "\004\042\006\001\001\000\002\001\001\000\004\031\007" +
    "\001\001\000\014\006\014\012\016\030\015\033\017\045" +
    "\010\001\001\000\006\035\356\036\361\001\001\000\004" +
    "\005\354\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\036\001\001\000\004\045\022\001" +
    "\001\000\006\034\025\051\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\042\001\001\000\002" +
    "\001\001\000\004\045\353\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\044\001\001\000\010\025\051" +
    "\037\052\071\047\001\001\000\004\005\067\001\001\000" +
    "\002\001\001\000\004\072\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\055\001\001\000\006\026\060\027\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\072\071\070\001\001\000\006\045\073\046\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\073\077" +
    "\001\001\000\002\001\001\000\014\010\105\013\106\014" +
    "\104\040\103\045\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\074\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\110\013\111" +
    "\045\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\114\001\001\000\006\006\116" +
    "\045\010\001\001\000\004\075\117\001\001\000\002\001" +
    "\001\000\004\017\120\001\001\000\016\011\132\020\131" +
    "\021\134\022\125\032\130\043\126\001\001\000\002\001" +
    "\001\000\004\017\333\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\064\302\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\011\132\021\245\022\244\032\130\043\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\043\147\047\144\050\154\052\150\053\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\100\235\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\230\001\001\000\002\001\001" +
    "\000\010\061\204\067\202\070\200\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\062\165\065\166\066\160" +
    "\001\001\000\002\001\001\000\014\043\147\047\156\050" +
    "\154\052\150\053\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\101\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\102\172\001\001\000\006\043\147\050\173" +
    "\001\001\000\002\001\001\000\006\043\147\050\175\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\043\147" +
    "\050\154\053\212\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\077\210" +
    "\001\001\000\010\043\147\050\154\053\207\001\001\000" +
    "\002\001\001\000\010\062\165\065\166\066\160\001\001" +
    "\000\010\043\147\050\154\053\211\001\001\000\010\062" +
    "\165\065\166\066\160\001\001\000\010\062\165\065\166" +
    "\066\160\001\001\000\004\103\225\001\001\000\020\015" +
    "\217\016\221\043\147\047\220\050\154\052\150\053\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\043\147" +
    "\047\223\050\154\052\150\053\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\043\147\047\226\050\154" +
    "\052\150\053\153\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\043\147\047\232\050\154" +
    "\052\150\053\153\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\043\147\050\154\053\236" +
    "\001\001\000\010\062\165\065\166\066\160\001\001\000" +
    "\002\001\001\000\014\043\147\047\241\050\154\052\150" +
    "\053\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\043\147\047\250\050\154\052\150\053" +
    "\153\054\251\055\253\056\252\001\001\000\004\063\271" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\043\147\047\250\050\154\052\150\053\153" +
    "\056\255\001\001\000\002\001\001\000\016\011\132\020" +
    "\261\021\262\022\125\032\130\043\126\001\001\000\020" +
    "\043\147\047\250\050\154\052\150\053\153\055\260\056" +
    "\252\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\011\132\021\265\022\264\032\130\043" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\043" +
    "\147\047\275\050\154\052\150\053\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\076\312\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\015\310" +
    "\016\221\043\147\047\220\050\154\052\150\053\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\043\147\047\313\050\154\052\150\053\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\032\322\043\321\060\317\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\064\302\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\043\147\047\250\050" +
    "\154\052\150\053\153\054\325\055\253\056\252\057\326" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\032\322\043\321\060\331\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\011\132\020\131\021" +
    "\134\022\125\032\130\043\126\001\001\000\002\001\001" +
    "\000\004\043\336\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\343\045\342\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\072\071\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\364\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\371\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	Tab.init(); // Universe scope
	boolType = new Struct(Struct.None);
	Tab.currentScope().addToLocals(new Obj(Obj.Type, "bool", boolType));
	setType = new Struct(Struct.None);
	Tab.currentScope().addToLocals(new Obj(Obj.Type, "set", setType));

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }



	int globProm = 0;
	int lokProm = 0;
	int globKon = 0;
	
	int globIStaticFunc = 0;
	int pozivFunkUMain = 0;
	int deklFormArg = 0;

	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
	Struct boolType;
	Struct setType;
	Obj lastArrayIndex;
	Obj lastArrayStoreIndex;
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
		System.err.println(msg.toString());
 //       log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {



	Obj currentMethod = null;
	Obj currentClass = null;
	Obj lastArrayDesignator = null;
	Obj lastArrayStoreDesignator = null;
	Obj temp = null;
	boolean returnFound = false;
	boolean isSet = true;
	
	boolean rightOp = false;
	boolean extendClass = false;
	boolean modifikacija = false;
	
	boolean fieldsStatic = false;
	ArrayList<Struct> actualParams = new ArrayList();
	
	Struct currentType = null;
	
	boolean inFor = false;
	boolean isVoid = false;
	
	boolean checkMethodParams(Obj func, int line) {
		HashMap<Integer, Struct> formPars = new HashMap<Integer, Struct>();
		Struct varArgsType = null;
		for (Obj locVar : func.getLocalSymbols()) {
			if (locVar.getFpPos() > 0) {
				if (locVar.getLocalSymbols().isEmpty()) //ako je ovo prazno znaci da su obicni parametri inace smo napravili da to budu promenljivi 
					formPars.put(locVar.getFpPos(), locVar.getType()); 
				else {
					varArgsType = locVar.getType().getElemType();
				}
			}
		}
		int varArgsLength = 0;
		if (varArgsType == null && formPars.size() != actualParams.size()) {
			parser.report_info("Greska: ne poklapa se broj stvarnih i formalnih argumenata ", null);	
		}
		else {
			if (actualParams.size() < formPars.size()) {
				parser.report_info("Greska: ne poklapa se broj stvarnih i formalnih argumenata ", null);	
			}
			else if (actualParams.size() > formPars.size()){
				varArgsLength = actualParams.size() - formPars.size();
				while (actualParams.size() > formPars.size()) {
					formPars.put(formPars.size() + 1, varArgsType);
				}
			}
			for (int i = 0; i < actualParams.size(); i++) {
				if (!actualParams.get(i).assignableTo(formPars.get(i+1))) {
					parser.report_info("Greska: stvarni i formalni argument se ne poklapaju po tipu ", null);
				}				
			}
		}
		
		if (varArgsLength > 0) {
			Obj varArgsArray = Tab.insert(Obj.Var, "varArgsArray", new Struct(Struct.Array, varArgsType));
			Code.loadConst(varArgsLength);
			Code.put(Code.newarray);
			if (varArgsType == Tab.intType) {
				Code.put(1); //rezervisemo toliko za jedan element 4B
			}
			else if (varArgsType == Tab.charType) {
				Code.put(0);
			}
			Code.store(varArgsArray); //ovde storujuemo adresu niza koja je ostala na Expr steku 
			for (int i = varArgsLength - 1; i >= 0; i--) {
				Code.store(temp);
				Code.load(varArgsArray);
				Code.loadConst(i);
				Code.load(temp);
				if (varArgsType.getKind() == Struct.Char)
					Code.put(Code.bastore);
				else
					Code.put(Code.astore); 
			}
			Code.load(varArgsArray); 
		}
	
		actualParams.clear();
		return true;
	}

	class FactorType {
		private Obj designator;
		private Struct type;
		
		public FactorType(Obj d, Struct t) {
			designator = d;
			type = t;
		}
		
		public Obj getDesignator() {
			return designator;
		}
		
		public void setDesignator(Obj d) {
			designator = d;
		}
		
		public Struct getType() {
			return type;
		}
		
		public void setType(Struct t) {
			type = t;
		}
	}

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // AssignOp ::= MODEQUAL 
            {
              Integer RESULT =null;
		
					RESULT = Code.rem;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignOp",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // AssignOp ::= DIVEQUAL 
            {
              Integer RESULT =null;
		
					RESULT = Code.div;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignOp",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // AssignOp ::= MULEQUAL 
            {
              Integer RESULT =null;
		
					RESULT = Code.mul;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignOp",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // AssignOp ::= MINUSEQUAL 
            {
              Integer RESULT =null;
		
					RESULT = Code.sub;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignOp",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // AssignOp ::= PLUSEQUAL 
            {
              Integer RESULT =null;
		
					RESULT = Code.add;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignOp",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // AssignOp ::= EQUAL 
            {
              Integer RESULT =null;
		
					RESULT = 0;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignOp",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // AddopRight ::= MINUSEQUAL 
            {
              Integer RESULT =null;
		 
					RESULT = Code.sub;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // AddopRight ::= PLUSEQUAL 
            {
              Integer RESULT =null;
		 
					RESULT = Code.add; 
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // AddopLeft ::= MINUS 
            {
              Integer RESULT =null;
		 
			RESULT = Code.sub;
          
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // AddopLeft ::= PLUS 
            {
              Integer RESULT =null;
		 
			RESULT = Code.add; 
          
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Addop ::= AddopRight 
            {
              Integer RESULT =null;
		int addopCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int addopCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer addopCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				rightOp = true;
				RESULT = addopCode;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Addop ::= AddopLeft 
            {
              Integer RESULT =null;
		int addopCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int addopCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer addopCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				RESULT = addopCode;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // MulopRight ::= MODEQUAL 
            {
              Integer RESULT =null;
		 
			RESULT = Code.rem; 
          
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // MulopRight ::= DIVEQUAL 
            {
              Integer RESULT =null;
		 
			RESULT = Code.div; 
          
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // MulopRight ::= MULEQUAL 
            {
              Integer RESULT =null;
		 
			RESULT = Code.mul; 
          
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // MulopLeft ::= MOD 
            {
              Integer RESULT =null;
		 
			RESULT = Code.rem; 
          
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // MulopLeft ::= DIV 
            {
              Integer RESULT =null;
		 
			RESULT = Code.div; 
          
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // MulopLeft ::= MUL 
            {
              Integer RESULT =null;
		 
			RESULT = Code.mul; 
          
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Mulop ::= MulopRight 
            {
              Integer RESULT =null;
		int mulopCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mulopCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer mulopCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				rightOp = true;
				RESULT = mulopCode;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Mulop ::= MulopLeft 
            {
              Integer RESULT =null;
		int mulopCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mulopCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer mulopCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				RESULT = mulopCode;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Relop ::= LESSEQUAL 
            {
              Integer RESULT =null;
		 
		RESULT = Code.le;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Relop ::= LESS 
            {
              Integer RESULT =null;
		
		RESULT = Code.lt; 
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Relop ::= MOREEQUAL 
            {
              Integer RESULT =null;
		
		RESULT = Code.ge;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Relop ::= MORE 
            {
              Integer RESULT =null;
		
		RESULT = Code.gt;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Relop ::= DIFERENT 
            {
              Integer RESULT =null;
		 
		RESULT = Code.ne;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Relop ::= CONDITIONALEQUAL 
            {
              Integer RESULT =null;
		 
		RESULT = Code.eq; 
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Designator ::= Designator DOT IDENT 
            {
              Obj RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj obj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					if(obj.getType().getKind() != Struct.Class)
						parser.report_error("Greska na liniji " + nameleft+ " : izraz nije klasnog tipa! ", null);
					
					Obj member = obj.getType().getMembers().searchKey(name);
					
					if(member != null) {
						RESULT = member;
						if (obj.getKind() == Obj.Type && member.getFpPos() == 0) {
							parser.report_error("Greska na liniji " + objleft+ " nije staticka metoda, a pristupa joj se preko imena klase ", null);
						}
					}
					else {
						parser.report_error("Greska na liniji " + nameleft+ " : ime "+name+" nije polje klase! ", null);
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Designator ::= Designator LSQUARE NT$9 Expr RSQUARE 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int objleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj obj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct expr = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
					if(expr == Tab.intType) {
						RESULT = new Obj(Obj.Elem, "", obj.getType().getElemType());
						Code.store(parser.lastArrayIndex);
						Code.load(parser.lastArrayIndex);
					}
					else {
						parser.report_error("Greska na liniji " + exprleft+ " : ime "+expr+" nije int! ", null);
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$9 ::= 
            {
              Obj RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj obj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

					if(obj.getType().getKind() != Struct.Array)
						parser.report_error("Greska na liniji " + objleft+ " : izraz nije niz! ", null);
					
					Code.load(obj);
					lastArrayDesignator = obj;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$9",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Designator ::= IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					Obj obj = Tab.find(name);
					if (obj == Tab.noObj) { 
						parser.report_error("Greska na liniji " + nameleft+ " : ime "+name+" nije deklarisano! ", null);
					}
					RESULT = obj;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ActualParamList ::= Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						actualParams.add(e);
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParamList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ActualParamList ::= ActualParamList COMMA Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						actualParams.add(e);
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParamList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ActualPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualPars",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ActualPars ::= ActualParamList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualPars",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Factor ::= LPAREN Expr RPAREN 
            {
              FactorType RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct expr = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				RESULT = new FactorType(null, expr);
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Factor ::= NEW Type 
            {
              FactorType RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				RESULT = new FactorType(null, varType);
				
				if (varType.equals(parser.setType)) {
					Code.loadConst(10);
					Code.put(Code.newarray);
					Code.put(1);
					Code.store(temp);
					for (int i=0; i<10; i++) {
						Code.load(temp);
						Code.loadConst(i);
						Code.loadConst(0);
						Code.put(Code.astore);
					}
					Code.load(temp);
				}
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Factor ::= NEW Type LSQUARE Expr RSQUARE 
            {
              FactorType RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct expr = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
		        if (expr != Tab.intType)
			  	parser.report_error("Semanticka greska na liniji " + exprleft + ": Expr mora biti int tipa", null);
				Code.put(Code.newarray);
				if (varType == Tab.intType) {
					Code.put(1);
				}
				else if (varType == Tab.charType) {
					Code.put(0);
				}
				else {
					parser.report_error("Greska na liniji " + varTypeleft+" : ime " + varType + " nije tipa char ili int!", null);
				}
				RESULT = new FactorType(null, new Struct(Struct.Array, varType));
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Factor ::= Designator LPAREN ActualPars RPAREN 
            {
              FactorType RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
			 if (currentMethod != null && currentClass == null && currentMethod.getName().equals("main"))
				parser.pozivFunkUMain++;
		       if (Obj.Meth == func.getKind()) { 
		   	   	   parser.report_info("Pronadjen poziv funkcije " + func.getName() + " na liniji " + funcleft, null);
		   	   	   if (func.getType() == Tab.noType) { 
		   	   	   		parser.report_error("Semanticka greska " + func.getName() + " ne moze se koristiti u izrazima jer nema povratnu vrednost, linija " + funcleft, null);
		   	   	   	}
		   	   	   	else if (checkMethodParams(func, funcleft)) {
						int destAdr = func.getAdr() - Code.pc;
		   	   	   		Code.put(Code.call);
		   	   	   		Code.put2(destAdr);
		   	   	   }
				   RESULT = new FactorType(func, func.getType());
		   	   } else {
		   	   	   parser.report_error("Greska na liniji " + funcleft+" : ime " + func.getName() + " nije funkcija!", null);
		   	   	   RESULT = new FactorType(func, Tab.noType);
		   	   }
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Factor ::= Designator 
            {
              FactorType RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
				Code.load(d);
				RESULT = new FactorType(d, d.getType());
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Factor ::= BOOL 
            {
              FactorType RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			   Obj c = new Obj(Obj.Con, "", parser.boolType);
				c.setAdr(b ? 1 : 0);
				Code.load(c);
				RESULT = new FactorType(c, parser.boolType); 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Factor ::= CHARACTER 
            {
              FactorType RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character i = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				Obj c = new Obj(Obj.Con, "", Tab.charType);
				c.setAdr(i.charValue());
				Code.load(c);
				RESULT = new FactorType(c, Tab.charType); 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Factor ::= NUMBER 
            {
              FactorType RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				Obj c = new Obj(Obj.Con, "", Tab.intType);
				c.setAdr(i.intValue());
				Code.load(c);
				RESULT = new FactorType(c, Tab.intType); 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Term ::= Term DVOTACKA NT$8 Factor 
            {
              FactorType RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (FactorType) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		FactorType f1 = (FactorType)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		FactorType f2 = (FactorType)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				Code.load(f2.getDesignator());
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$8 ::= 
            {
              FactorType RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		FactorType f1 = (FactorType)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

				 
					 Code.load( f1.getDesignator());
					 Code.store(temp);
					
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$8",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Term ::= Factor 
            {
              FactorType RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		FactorType f = (FactorType)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = f; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Term ::= Term Mulop NT$7 Factor 
            {
              FactorType RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (FactorType) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		FactorType f1 = (FactorType)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int mulopCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int mulopCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer mulopCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		FactorType f2 = (FactorType)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			
					if (f1.getType().equals(f2.getType()) && f1.getType() == Tab.intType) {
						if (rightOp  == true && (f1.getDesignator().getKind() == Obj.Var || f1.getDesignator().getKind() == Obj.Elem || f1.getDesignator().getKind() == Obj.Fld)) {
							Code.put(mulopCode);
							if (f1.getDesignator().getKind() == Obj.Elem) {
								Code.store(temp);
								Code.load(lastArrayStoreDesignator);
								Code.load(parser.lastArrayStoreIndex);
								Code.load(temp);
							}
							Code.store(f1.getDesignator());
							if (f1.getDesignator().getKind() == Obj.Elem) {
								Code.load(lastArrayStoreDesignator);
								Code.load(parser.lastArrayStoreIndex);
							}
							Code.load(f1.getDesignator());
							rightOp = false;
							RESULT = f1;							
						}
						else if (rightOp == false) {
							Code.put(mulopCode);
							RESULT = f1;
						}
						else
							parser.report_error("Greska na liniji "+ f1left+" : nekompatibilni tipovi u izrazu za mozenje.", null);
					}
					else {
						parser.report_error("Greska na liniji "+ f1left+" : nekompatibilni tipovi u izrazu za mozenje.", null);
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$7 ::= 
            {
              FactorType RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		FactorType f1 = (FactorType)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int mulopCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mulopCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer mulopCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

					if (rightOp  == true && f1.getDesignator().getKind() == Obj.Elem) {
						lastArrayStoreDesignator = lastArrayDesignator;
						Code.load(parser.lastArrayIndex);
						Code.store(parser.lastArrayStoreIndex);
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$7",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ExprFactorType ::= ExprFactorType TARABA Term 
            {
              FactorType RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		FactorType e = (FactorType)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		FactorType t = (FactorType)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			    
			    Code.load(e.getDesignator());
				Code.load(temp);
				Code.put(Code.sub);
				Code.store(temp);
				Code.load(e.getDesignator());
				Code.put(Code.add);
				Code.load(temp);
				Code.put(Code.mul);
			    RESULT = new FactorType(null, Tab.intType);
			  
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprFactorType",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ExprFactorType ::= ExprFactorType UPITNIK Term 
            {
              FactorType RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		FactorType e1 = (FactorType)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		FactorType e2 = (FactorType)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					Code.put(Code.aload);
					RESULT = new FactorType(null, Tab.intType);
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprFactorType",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ExprFactorType ::= MINUS NT$6 Term 
            {
              FactorType RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (FactorType) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		FactorType t = (FactorType)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					Code.put(Code.sub);
					RESULT = t;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprFactorType",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$6 ::= 
            {
              FactorType RESULT =null;
 
					Code.loadConst(0);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ExprFactorType ::= Term 
            {
              FactorType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		FactorType t = (FactorType)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = t; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprFactorType",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ExprFactorType ::= ExprFactorType Addop NT$5 Term 
            {
              FactorType RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (FactorType) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		FactorType t1 = (FactorType)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int addopCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int addopCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer addopCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		FactorType t2 = (FactorType)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				if (t1.getType().equals(t2.getType()) && t1.getType().equals(Tab.intType)) {
					if (rightOp  == true && (t1.getDesignator().getKind() == Obj.Var || t1.getDesignator().getKind() == Obj.Elem || t1.getDesignator().getKind() == Obj.Fld)) {
						Code.put(addopCode);
						if (t1.getDesignator().getKind() == Obj.Elem) {
							Code.store(temp);
							Code.load(lastArrayStoreDesignator);
							Code.load(parser.lastArrayStoreIndex);
							Code.load(temp);
						}
						Code.store(t1.getDesignator());
						if (t1.getDesignator().getKind() == Obj.Elem) {
							Code.load(lastArrayStoreDesignator);
							Code.load(parser.lastArrayStoreIndex);
						}
						Code.load(t1.getDesignator());
						rightOp = false;	
						RESULT = t1;
					}
					else if (rightOp == false) {
						Code.put(addopCode);
						RESULT = t1;
					}
					else
						parser.report_error("Greska na liniji "+ t1left+" : nekompatibilni tipovi u izrazu za sabiranje.", null);
				}
				else {
					parser.report_error("Greska na liniji "+ t1left+" : nekompatibilni tipovi u izrazu za sabiranje.", null);
					RESULT = new FactorType(null, Tab.noType);
				}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprFactorType",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$5 ::= 
            {
              FactorType RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		FactorType t1 = (FactorType)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int addopCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int addopCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer addopCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

					if (rightOp  == true && t1.getDesignator().getKind() == Obj.Elem) {
						lastArrayStoreDesignator = lastArrayDesignator;
						Code.load(parser.lastArrayIndex);
						Code.store(parser.lastArrayStoreIndex);
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expr ::= ExprFactorType 
            {
              Struct RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		FactorType e = (FactorType)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			RESULT = e.getType();
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CondFact ::= Expr 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			if(t != parser.boolType) 
			parser.report_error("Greska na liniji "+ tleft+" : uslov nije tipa bool", null);
		 	RESULT = new Obj(Obj.Con, "", t);
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CondFact ::= Expr Relop Expr 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct t1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t2 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
         	if(!t1.assignableTo(t2) && t1.getKind() != Struct.Array && t1.getElemType().getKind() != Struct.Char)
         	{
         		parser.report_error("Greska na liniji: "+t1left+": nekompatibilni tipovi", null);
         	}
         	else if(t1.getKind() == Struct.Class || t1.getKind() == Struct.Array)
         	{
         		if(o != Code.ne && o != Code.eq)
         		{
         			parser.report_error("Semanticka greska na liniji: "+t2left+" : Uz promenljive tipa klase ili niza, od relacionih operatora, mogu se koristiti samo != i ==.", null);
         		}
         	}
         	else {
         		Obj ret = new Obj(Obj.Con,"",Tab.intType);
         		
         		int a, b;
         		a = Code.get(Code.pc);
         		b = Code.get(Code.pc);
         		
 /*        		switch(o) {
         		
         		case "MORE" :
							if(a > b) o.setAdr(1);
							else o.setAdr(0);							         		
         		 			break;
         		case "MOREEQUAL": 
							if(a >= b) o.setAdr(1);
							else o.setAdr(0);	
         					break;
          		case "LESS":
							if(a < b) o.setAdr(1);
							else o.setAdr(0);	
          					break; 		
         		case "LESSEQUAL":	
							if(a <= b) o.setAdr(1);
							else o.setAdr(0);	
         					break;	
         		}*/        	
         	}
         
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CondTerm ::= CondFact 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CondTerm ::= CondTerm AND CondFact 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
/*			if( (c1.getAdr() != 0 ) && (c2.getAdr() != 0) ){
		  		RESULT = c2;
			}
			else {
				c2.setAdr(0);			  	
				RESULT = c2;				  	
			}*/
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Condition ::= CondTerm 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Condition ::= Condition OR CondTerm 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
/*				if( (c1.getAdr() == 0 ) && (c2.getAdr() == 0) ){
		  			RESULT = c2;
				}
				else {
					c2.setAdr(1);			  	
					RESULT = c2;				  	
				}*/
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Matched ::= Designator EQUAL error SEMI 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
				   parser.log.debug("Uspesan oporavak od greske pri konstrukciji iskaza dodele vrednosti do ; u liniji "+lleft); 
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Matched ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Matched ::= PRINT LPAREN Expr RPAREN SEMI 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
			
			 if (currentMethod != null && currentClass == null && currentMethod.getName().equals("main"))
					parser.pozivFunkUMain++;
			  	 if (t != Tab.intType && t != Tab.charType && t != parser.boolType)
			  	 	parser.report_error("Semanticka greska na liniji " + tleft + ": Operand instrukcije PRINT mora biti char ili int tipa", null);
				if ( t == Tab.intType ) 
				{
				Code.loadConst(5);
				Code.put(Code.print);
				}
				if ( t == Tab.charType )
				{
				Code.loadConst(1);
				Code.put(Code.bprint);
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Matched ::= READ LPAREN Designator RPAREN SEMI 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
			
			if (currentMethod != null && currentClass == null && currentMethod.getName().equals("main"))
			parser.pozivFunkUMain++;
			
			if ( d.getKind() == Obj.Var || d.getKind() == Obj.Elem || d.getKind() == Obj.Fld ) {
			    if ( d.getType().getKind() == Struct.Int || d.getType().getKind() == Struct.Char || d.getType().equals(parser.boolType) ) 
				{
				Code.put(Code.read);
				Code.store(d);
				}
				} else { 
				parser.report_error("Greska na liniji " + dleft + ": designator nije odgovarajuceg tipa.", null);
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Matched ::= RETURN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Matched ::= RETURN Expr SEMI 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
			returnFound = true; 
			Struct currMethType = currentMethod.getType();
			if( !currMethType.compatibleWith(t) || isVoid == false && t == Tab.noType )  {
				 	parser.report_error("Greska na liniji " + tleft + " : " + "tip izraza u return naredbi ne slaze se sa tipom povratne vrednosti funkcije " + currentMethod.getName(), null);
				 }			  	 
			
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Matched ::= CONTINUE SEMI 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
					if (!inFor) {
						parser.report_error("Semanticka greska na liniji " + bleft + ": CONTINUE se moze koristiti samo unutar FOR petlje", null);
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Matched ::= BREAK SEMI 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
					if (!inFor) {
						parser.report_error("Semanticka greska na liniji " + bleft + ": BREAK se moze koristiti samo unutar FOR petlje", null);
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Matched ::= ForPart Matched 
            {
              Object RESULT =null;
		 inFor = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Matched ::= IF LPAREN Condition RPAREN Matched ELSE Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Matched ::= DesignatorStatement SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OptCondition ::= error 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptCondition",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OptCondition ::= Condition 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptCondition",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OptDesignatorStatement ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							parser.log.debug("Uspesan oporavak od greske unutar for petlje do prvog znaka ; ili ) " +eleft);
							
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptDesignatorStatement",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OptDesignatorStatement ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptDesignatorStatement",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OptDesignatorStatement ::= DesignatorStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptDesignatorStatement",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Unmatched ::= ForPart Unmatched 
            {
              Object RESULT =null;
		 inFor = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Unmatched ::= IF LPAREN Condition RPAREN Matched ELSE Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Unmatched ::= IF LPAREN Condition RPAREN Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ForPart ::= FOR LPAREN OptDesignatorStatement SEMI OptCondition SEMI OptDesignatorStatement RPAREN 
            {
              Object RESULT =null;
		 inFor = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForPart",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DesignatorStatement ::= Designator LPAREN ActualPars RPAREN 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
				 if (currentMethod != null && currentClass == null && currentMethod.getName().equals("main"))
					parser.pozivFunkUMain++;
		         if (Obj.Meth == func.getKind()) { 
		   	   	    parser.report_info("Pronadjen poziv funkcije " + func.getName() + " na liniji " + funcleft, null);
					if (checkMethodParams(func, funcleft)) {
						int destAdr = func.getAdr() - Code.pc;
						Code.put(Code.call);
						Code.put2(destAdr);
						if (func.getType() != Tab.noType)
							Code.put(Code.pop);
					}
		   	     } 
		   	     else {
		   	   	    parser.report_error("Greska na liniji " + funcleft+" : ime " + func.getName() + " nije funkcija!", null);
		   	     } 
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DesignatorStatement ::= Designator DEC 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
		      		if (d.getKind() != Obj.Var || d.getKind() != Obj.Elem || d.getKind() != Obj.Fld) {
		      			if (d.getType().getKind() != Struct.Int)
							parser.report_error("Greska na liniji " + dleft+" : Designator nije tipa int, pa ne moze biti dekrementiran.", null);	
			      		
						// if(d.getKind() == Obj.Elem) {
						// 	Code.put(Code.dup2);
						// }
			      		
			      		Code.load(d);
			      		Code.loadConst(1);
			      		Code.put(Code.sub);
			      		Code.store(d);

		      		}
		      		else {
		      			parser.report_error("Greska na liniji " + dleft+" : Designator nije varijabla, element niza ili polje klase, pa ne moze biti dekrementiran.", null);
		      		}
		      
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DesignatorStatement ::= Designator INC 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
		      		if (d.getKind() == Obj.Var || d.getKind() == Obj.Elem || d.getKind() == Obj.Fld) {
		      			if (d.getType().getKind() != Struct.Int)
							parser.report_error("Greska na liniji " + dleft+" : Designator nije tipa int, pa ne moze biti inkrementiran.", null);

						// if(d.getKind() == Obj.Elem) {
						// 	Code.put(Code.dup2);
						// }

						Code.load(d);
			      		Code.loadConst(1);
			      		Code.put(Code.add);
			      		Code.store(d);
		      		}
		      		else {
		      			parser.report_error("Greska na liniji " + dleft+" : Designator nije varijabla, element niza ili polje klase, pa ne moze biti inkrementiran.", null);
		      		}
		      
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DesignatorStatement ::= Designator AssignOp NT$4 Expr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int opCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int opCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer opCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				if (dest.getType().equals(parser.setType) && opCode == Code.add) {
					Code.loadConst(1);
					Code.put(Code.astore);
				}
			    else if (!(dest.getKind() == Obj.Var || dest.getKind() == Obj.Elem || dest.getKind() == Obj.Fld)) {
					parser.report_error("Greska na liniji " + destleft+" : Designator nije varijabla, element niza ili polje unutar objekta", null);
				}
				else if (!e.assignableTo(dest.getType()))
					parser.report_error("Greska na liniji " + destleft + " : " + " nekompatibilni tipovi u dodeli vrednosti ", null);
				else {
					if (opCode != 0) {
						Code.put(opCode);
					}
					Code.store(dest);
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$4 ::= 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int opCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer opCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

				if (dest.getType().equals(parser.setType) && opCode == Code.add) {
					Code.load(dest);
				}
				else if (opCode != 0)
					Code.load(dest);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Statement ::= Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Statement ::= Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FormalParamDecl ::= Type IDENT LSQUARE RSQUARE 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				parser.report_info("Deklarisan niz "+ varName+" na liniji "+ varNameleft, null);
				Obj sym = Tab.currentScope().findSymbol(varName);
				     if (sym == null) {
						Obj obj = Tab.insert(Obj.Var, varName, new Struct(Struct.Array, currentType));
						obj.setFpPos(Tab.currentScope().getnVars() + 1);
					}
				    else {
						parser.report_info("Greska na liniji, nije jedinstveno ime "+ varNameleft, null);
				    }
				
				parser.deklFormArg++;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamDecl",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FormalParamDecl ::= Type IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				parser.report_info("Deklarisana promenljiva "+ varName+" na liniji "+ varNameleft, null);
				   Obj sym = Tab.currentScope().findSymbol(varName);
				     if (sym == null) {
						Obj obj = Tab.insert(Obj.Var, varName, currentType);
						obj.setFpPos(Tab.currentScope().getnVars());
					}
				    else {
						parser.report_info("Greska na liniji, nije jedinstveno ime "+ varNameleft, null);
				    }
				
				parser.deklFormArg++;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamDecl",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FormPars ::= FormalParamDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FormPars ::= error COMMA FormalParamDecl 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
					parser.log.debug("Uspesan oporavak od greske pri deklaraciji formalnog parametra funkcije do , u liniji " +eleft);
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FormPars ::= FormPars COMMA FormalParamDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VarArgs ::= Type DOT DOT DOT IDENT 
            {
              Object RESULT =null;
		int nizleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nizright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String niz = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				Obj obj = Tab.insert(Obj.Var, niz, new Struct(Struct.Array, currentType));
				obj.setFpPos(Tab.currentScope().getnVars());
				HashTableDataStructure locals = new HashTableDataStructure();
				locals.insertKey(Tab.noObj);
				obj.setLocals(locals);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarArgs",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FormArgs ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormArgs",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FormArgs ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				parser.log.debug("Uspesan oporavak od greske pri deklaraciji formalnog parametra funkcije do ) u liniji " +eleft);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormArgs",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FormArgs ::= VarArgs 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormArgs",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FormArgs ::= FormPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormArgs",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FormArgs ::= FormPars COMMA VarArgs 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormArgs",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // MethodDecl ::= OptStatic RetType IDENT NT$1 LPAREN FormArgs NT$2 RPAREN VarDeclList LBRACE NT$3 StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).value;
		
			   	 if (!returnFound && retType != Tab.noType)
			   	 	parser.report_error("Semanticka greska na liniji " + methNameleft + ": funcija " + methName + " nema return iskaz!", null);
				
				 Code.put(Code.exit);
				 Code.put(Code.return_);
				  
				 Tab.chainLocalSymbols(currentMethod);
			   	 Tab.closeScope();
			   	 
				 returnFound = false;
				 currentMethod = null;
				 isVoid = false;
				 
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
 
			   		currentMethod.setAdr(Code.pc);
			   		if ("main".equals(methName)) {
			   			Code.mainPc = currentMethod.getAdr();
			   		}
			   		Code.put(Code.enter);
					Code.put(currentMethod.getLevel());
			   		Code.put(Tab.currentScope().getnVars());
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
 
			   		currentMethod.setLevel(Tab.currentScope().getnVars());
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$1 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

				    Obj sym = Tab.currentScope().findSymbol(methName);
				     if (sym == null)
						currentMethod = Tab.insert(Obj.Meth, methName, retType);
				    else {
						parser.report_info("Greska na liniji, nije jedinstveno ime "+ methNameleft, null);
						currentMethod = new Obj (Obj.Meth, methName, retType);
				    }
					parser.report_info("Obradjuje se funkcija " + methName + " na liniji " + methNameleft, null);
					Tab.openScope();
					if(b) {
						currentMethod.setFpPos(1);
						parser.globIStaticFunc++;
					}
					else if (currentClass == null)
						parser.globIStaticFunc++;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OptStatic ::= 
            {
              Boolean RESULT =null;
		
					RESULT = false;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptStatic",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OptStatic ::= STATIC 
            {
              Boolean RESULT =null;
		
					RESULT = true;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptStatic",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // RetType ::= VOID 
            {
              Struct RESULT =null;
		
			RESULT = Tab.noType;
			isVoid = true;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RetType",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // RetType ::= Type 
            {
              Struct RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			RESULT = type;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RetType",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ClassDeclMethod ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDeclMethod",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ClassDeclMethod ::= error LBRACE 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		parser.log.debug("Uspesan oporavak od greske pri deklaraciji polja unutrasnje klase do { u liniji " +lleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDeclMethod",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ClassDeclMethod ::= LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDeclMethod",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ClassDecl ::= CLASS ClassIdent ExtType LBRACE ClassVarDeclList ClassDeclMethod RBRACE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		
				Tab.chainLocalSymbols(o.getType());  //zasto je ovde o.getType
				Tab.closeScope(); 
				currentClass = null;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ClassIdent ::= IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		  
				Obj sym = Tab.currentScope().findSymbol(name);
				if (sym == null)
					currentClass = RESULT = Tab.insert(Obj.Type, name, new Struct(Struct.Class));
				else {
					parser.report_info("Greska na liniji, nije jedinstveno ime "+ nameleft, null);
					currentClass = RESULT = new Obj (Obj.Type, name, new Struct(Struct.Class));
				}
				Tab.openScope(); 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassIdent",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SingleClassVarDecl ::= IDENT LSQUARE RSQUARE 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				parser.report_info("Deklarisano polje klase "+ varName+" na liniji "+ varNameleft, null);
				Obj sym = Tab.currentScope().findSymbol(varName);
				if (sym == null) {
					Obj field = Tab.insert(Obj.Fld, varName, new Struct(Struct.Array, currentType));
					if (fieldsStatic)
						field.setFpPos(1);
				}
				else {
					parser.report_info("Greska na liniji, nije jedinstveno ime "+ varNameleft, null);	
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SingleClassVarDecl",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SingleClassVarDecl ::= IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				parser.report_info("Deklarisano polje klase "+ varName+" na liniji "+ varNameleft, null);
				
				Obj sym = Tab.currentScope().findSymbol(varName);
				if (sym == null) {
					Obj field = Tab.insert(Obj.Fld, varName, currentType); 
					if (fieldsStatic)
						field.setFpPos(1);
				}
				else {
					parser.report_info("Greska na liniji, ime nije jedinstveno: "+ varNameleft, null);	
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SingleClassVarDecl",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ClassVarDeclPart ::= SingleClassVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDeclPart",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassVarDeclPart ::= ClassVarDeclPart COMMA SingleClassVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDeclPart",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassVarDecl ::= OptStatic NT$0 Type ClassVarDeclPart SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		 fieldsStatic = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDecl",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$0 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 if (b) fieldsStatic = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassVarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDeclList",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassVarDeclList ::= ClassVarDeclList ClassVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDeclList",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ExtType ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtType",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ExtType ::= error 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.log.debug("Uspesan oporavak pri prosirenju klase do { u liniji " +lleft);
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtType",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ExtType ::= EXTENDS Type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			if(t.getKind() != Struct.Class){
				parser.report_error("Semanticka greska na liniji " +tleft +": Ime "+t+" nije unutrasnja klasa glavnog programa", null);
			}
			extendClass = true;
			RESULT = t;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtType",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Type ::= SET 
            {
              Struct RESULT =null;
		
        isSet = true;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			Obj typeNode = Tab.find(typeName);
			if (typeNode == Tab.noObj) {
				parser.report_error("Nije pronadjen tip " + typeName + " u tabeli simbola", null);
				currentType = RESULT = Tab.noType;
			}
			else {
				if (Obj.Type == typeNode.getKind()) {
					currentType = RESULT = typeNode.getType();
				}
				else {
					parser.report_error("Greska na liniji" + typeNameleft+ ": Ime " + typeName + " ne predstavlja tip ", null);
					currentType = RESULT = Tab.noType;
				}
			}
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ConstValue ::= BOOL 
            {
              Integer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					RESULT = b ? 1 : 0;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstValue",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ConstValue ::= CHARACTER 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					RESULT = (int)c.charValue();
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstValue",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ConstValue ::= NUMBER 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					RESULT = n;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstValue",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SingleConstDecl ::= IDENT EQUAL ConstValue 
            {
              FactorType RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				parser.report_info("Deklarisana konstanta "+ varName+" na liniji "+ varNameleft, null);
				
				
				Obj sym = Tab.currentScope().findSymbol(varName);
				if (sym == null) {
					Obj result = Tab.insert(Obj.Con, varName, currentType);
					result.setAdr(c);
					parser.globKon++;
				}
				else {
					parser.report_info("Greska na liniji, nije jedinstveno ime: "+ varNameleft, null);	
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SingleConstDecl",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ConstDeclPart ::= SingleConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclPart",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ConstDeclPart ::= ConstDeclPart COMMA SingleConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclPart",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ConstDecl ::= CONST Type ConstDeclPart SEMI 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				  if( !t.equals(Tab.intType) && !t.equals(Tab.charType) && !t.equals(parser.boolType) )
				  parser.report_info("Greska na liniji:"+ tleft, null);
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SingleVarDecl ::= IDENT LSQUARE RSQUARE 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				parser.report_info("Deklarisan niz "+ varName+" na liniji "+ varNameleft, null);
		
				Obj sym = Tab.currentScope().findSymbol(varName);
				if (sym == null)
					Tab.insert(Obj.Var, varName, new Struct(Struct.Array, currentType));
				else {
					parser.report_info("Greska na liniji, nije jedinstveno ime "+  varNameleft, null);	
				}
				
				if (currentMethod == null && currentClass == null)
					parser.globProm++;  
				else if (currentMethod != null && currentClass == null && currentMethod.getName().equals("main"))
					parser.lokProm++;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SingleVarDecl",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SingleVarDecl ::= IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				parser.report_info("Deklarisana promenljiva "+ varName+" na liniji "+ varNameleft, null);
				
				Obj sym = Tab.currentScope().findSymbol(varName);
				if (sym == null)
					Tab.insert(Obj.Var, varName, currentType); 
				else {
				parser.report_info("Greska na liniji, nije jedinstveno ime "+  varNameleft, null);	
				}
				
				if (currentMethod == null && currentClass == null)
					parser.globProm++;
				else if (currentMethod != null && currentClass == null && currentMethod.getName().equals("main"))
					parser.lokProm++;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SingleVarDecl",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VarDeclPart ::= SingleVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclPart",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VarDeclPart ::= error COMMA SingleVarDecl 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
			parser.log.debug("Uspesan oporavak od greske pri definiciji globalnih promenljivih do sledeceg , u liniji " +eleft);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclPart",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VarDeclPart ::= VarDeclPart COMMA SingleVarDecl 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclPart",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarDecl ::= Type error SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			parser.log.debug("Uspesan oporavak od greske pri definiciji globalnih promenljivih do ; u liniji " +lleft);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarDecl ::= Type VarDeclPart SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarDeclList ::= VarDeclList VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ProgDecl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgDecl",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ProgDecl ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgDecl",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ProgDecl ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgDecl",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ProgDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgDeclList",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ProgDeclList ::= ProgDeclList ProgDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgDeclList",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgName ::= IDENT 
            {
              Obj RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String pName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		  
	RESULT = Tab.insert(Obj.Prog, pName, Tab.noType);
	Tab.openScope(); 
	parser.lastArrayIndex = Tab.insert(Obj.Var, "lastArrayIndex", Tab.intType);
	parser.lastArrayStoreIndex = Tab.insert(Obj.Var, "lastArrayStoreIndex", Tab.intType);
	temp = Tab.insert(Obj.Var, "temp", Tab.intType);
	
	Tab.openScope(); 
	Obj values = Tab.insert(Obj.Fld, "values", new Struct(Struct.Array, Tab.intType));
	Tab.chainLocalSymbols(parser.setType);
	Tab.closeScope(); 

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgName",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROG ProgName ProgDeclList LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
	Code.dataSize = Tab.currentScope().getnVars();
	
	Tab.chainLocalSymbols(p);
	Tab.closeScope(); 

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

